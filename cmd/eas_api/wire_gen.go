// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"eas_api/internal/biz"
	"eas_api/internal/conf"
	"eas_api/internal/data"
	"eas_api/internal/server"
	"eas_api/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewAdministratorRepo(dataData, logger)
	sysLoginRepo := data.NewSysLoginRepo(dataData, logger)
	loginUseCase := biz.NewLoginUseCase(userRepo, sysLoginRepo, logger)
	userUseCase := biz.NewUserUseCase(userRepo, logger)
	easService := service.NewEasService(loginUseCase, userUseCase)
	salesPaperRepo := data.NewSalesPaperRepo(dataData, logger)
	salesPaperUseCase := biz.NewSalesPaperUseCase(salesPaperRepo, userUseCase, logger)
	salesPaperCommentRepo := data.NewSalesPaperCommentRepo(dataData, logger)
	salesPaperCommentUseCase := biz.NewSalesPaperCommentUseCase(salesPaperCommentRepo, userUseCase, logger)
	salesPaperDimensionRepo := data.NewSalesPaperDimensionRepo(dataData, logger)
	salesPaperDimensionUseCase := biz.NewSalesPaperDimensionUseCase(salesPaperDimensionRepo, salesPaperUseCase, userUseCase, logger)
	salesPaperDimensionCommentRepo := data.NewSalesPaperDimensionCommentRepo(dataData, logger)
	salesPaperDimensionCommentUseCase := biz.NewSalesPaperDimensionCommentUseCase(salesPaperDimensionCommentRepo, userUseCase, logger)
	questionRepo := data.NewQuestionRepo(dataData, logger)
	questionUseCase := biz.NewQuestionUseCase(questionRepo, salesPaperUseCase, userUseCase, logger)
	easSalesPaperService := service.NewEasSalesPaperService(userUseCase, salesPaperUseCase, salesPaperCommentUseCase, salesPaperDimensionUseCase, salesPaperDimensionCommentUseCase, questionUseCase)
	grpcServer := server.NewGRPCServer(confServer, easService, easSalesPaperService, logger)
	httpServer := server.NewHTTPServer(confServer, easService, easSalesPaperService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
