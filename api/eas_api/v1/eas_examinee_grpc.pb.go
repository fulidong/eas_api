// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: eas_api/v1/eas_examinee.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EasExamineeServiceClient is the client API for EasExamineeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EasExamineeServiceClient interface {
	// ===============================考生模块=========================================
	// 创建考生
	SaveExaminee(ctx context.Context, in *SaveExamineeRequest, opts ...grpc.CallOption) (*SaveExamineeResponse, error)
	// 查询考生列表
	GetExamineePageList(ctx context.Context, in *GetExamineePageListRequest, opts ...grpc.CallOption) (*GetExamineePageListResponse, error)
	// 考生详情
	GetExamineeDetail(ctx context.Context, in *GetExamineeDetailRequest, opts ...grpc.CallOption) (*GetExamineeDetailResponse, error)
	// 修改考生信息
	UpdateExaminee(ctx context.Context, in *UpdateExamineeRequest, opts ...grpc.CallOption) (*UpdateExamineeResponse, error)
	// 删除考生信息
	DeleteExaminee(ctx context.Context, in *DeleteExamineeRequest, opts ...grpc.CallOption) (*DeleteExamineeResponse, error)
}

type easExamineeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEasExamineeServiceClient(cc grpc.ClientConnInterface) EasExamineeServiceClient {
	return &easExamineeServiceClient{cc}
}

func (c *easExamineeServiceClient) SaveExaminee(ctx context.Context, in *SaveExamineeRequest, opts ...grpc.CallOption) (*SaveExamineeResponse, error) {
	out := new(SaveExamineeResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasExamineeService/SaveExaminee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easExamineeServiceClient) GetExamineePageList(ctx context.Context, in *GetExamineePageListRequest, opts ...grpc.CallOption) (*GetExamineePageListResponse, error) {
	out := new(GetExamineePageListResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasExamineeService/GetExamineePageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easExamineeServiceClient) GetExamineeDetail(ctx context.Context, in *GetExamineeDetailRequest, opts ...grpc.CallOption) (*GetExamineeDetailResponse, error) {
	out := new(GetExamineeDetailResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasExamineeService/GetExamineeDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easExamineeServiceClient) UpdateExaminee(ctx context.Context, in *UpdateExamineeRequest, opts ...grpc.CallOption) (*UpdateExamineeResponse, error) {
	out := new(UpdateExamineeResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasExamineeService/UpdateExaminee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easExamineeServiceClient) DeleteExaminee(ctx context.Context, in *DeleteExamineeRequest, opts ...grpc.CallOption) (*DeleteExamineeResponse, error) {
	out := new(DeleteExamineeResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasExamineeService/DeleteExaminee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EasExamineeServiceServer is the server API for EasExamineeService service.
// All implementations must embed UnimplementedEasExamineeServiceServer
// for forward compatibility
type EasExamineeServiceServer interface {
	// ===============================考生模块=========================================
	// 创建考生
	SaveExaminee(context.Context, *SaveExamineeRequest) (*SaveExamineeResponse, error)
	// 查询考生列表
	GetExamineePageList(context.Context, *GetExamineePageListRequest) (*GetExamineePageListResponse, error)
	// 考生详情
	GetExamineeDetail(context.Context, *GetExamineeDetailRequest) (*GetExamineeDetailResponse, error)
	// 修改考生信息
	UpdateExaminee(context.Context, *UpdateExamineeRequest) (*UpdateExamineeResponse, error)
	// 删除考生信息
	DeleteExaminee(context.Context, *DeleteExamineeRequest) (*DeleteExamineeResponse, error)
	mustEmbedUnimplementedEasExamineeServiceServer()
}

// UnimplementedEasExamineeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEasExamineeServiceServer struct {
}

func (UnimplementedEasExamineeServiceServer) SaveExaminee(context.Context, *SaveExamineeRequest) (*SaveExamineeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveExaminee not implemented")
}
func (UnimplementedEasExamineeServiceServer) GetExamineePageList(context.Context, *GetExamineePageListRequest) (*GetExamineePageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExamineePageList not implemented")
}
func (UnimplementedEasExamineeServiceServer) GetExamineeDetail(context.Context, *GetExamineeDetailRequest) (*GetExamineeDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExamineeDetail not implemented")
}
func (UnimplementedEasExamineeServiceServer) UpdateExaminee(context.Context, *UpdateExamineeRequest) (*UpdateExamineeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExaminee not implemented")
}
func (UnimplementedEasExamineeServiceServer) DeleteExaminee(context.Context, *DeleteExamineeRequest) (*DeleteExamineeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExaminee not implemented")
}
func (UnimplementedEasExamineeServiceServer) mustEmbedUnimplementedEasExamineeServiceServer() {}

// UnsafeEasExamineeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EasExamineeServiceServer will
// result in compilation errors.
type UnsafeEasExamineeServiceServer interface {
	mustEmbedUnimplementedEasExamineeServiceServer()
}

func RegisterEasExamineeServiceServer(s grpc.ServiceRegistrar, srv EasExamineeServiceServer) {
	s.RegisterService(&EasExamineeService_ServiceDesc, srv)
}

func _EasExamineeService_SaveExaminee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveExamineeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasExamineeServiceServer).SaveExaminee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasExamineeService/SaveExaminee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasExamineeServiceServer).SaveExaminee(ctx, req.(*SaveExamineeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasExamineeService_GetExamineePageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamineePageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasExamineeServiceServer).GetExamineePageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasExamineeService/GetExamineePageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasExamineeServiceServer).GetExamineePageList(ctx, req.(*GetExamineePageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasExamineeService_GetExamineeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamineeDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasExamineeServiceServer).GetExamineeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasExamineeService/GetExamineeDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasExamineeServiceServer).GetExamineeDetail(ctx, req.(*GetExamineeDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasExamineeService_UpdateExaminee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExamineeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasExamineeServiceServer).UpdateExaminee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasExamineeService/UpdateExaminee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasExamineeServiceServer).UpdateExaminee(ctx, req.(*UpdateExamineeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasExamineeService_DeleteExaminee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExamineeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasExamineeServiceServer).DeleteExaminee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasExamineeService/DeleteExaminee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasExamineeServiceServer).DeleteExaminee(ctx, req.(*DeleteExamineeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EasExamineeService_ServiceDesc is the grpc.ServiceDesc for EasExamineeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EasExamineeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eas_api.v1.EasExamineeService",
	HandlerType: (*EasExamineeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveExaminee",
			Handler:    _EasExamineeService_SaveExaminee_Handler,
		},
		{
			MethodName: "GetExamineePageList",
			Handler:    _EasExamineeService_GetExamineePageList_Handler,
		},
		{
			MethodName: "GetExamineeDetail",
			Handler:    _EasExamineeService_GetExamineeDetail_Handler,
		},
		{
			MethodName: "UpdateExaminee",
			Handler:    _EasExamineeService_UpdateExaminee_Handler,
		},
		{
			MethodName: "DeleteExaminee",
			Handler:    _EasExamineeService_DeleteExaminee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eas_api/v1/eas_examinee.proto",
}
