// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.3
// source: eas_api/v1/eas_sales_paper_models.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuestionType int32

const (
	QuestionType_RadioChoice    QuestionType = 0
	QuestionType_MultipleChoice QuestionType = 1
	QuestionType_Judge          QuestionType = 2
)

// Enum value maps for QuestionType.
var (
	QuestionType_name = map[int32]string{
		0: "RadioChoice",
		1: "MultipleChoice",
		2: "Judge",
	}
	QuestionType_value = map[string]int32{
		"RadioChoice":    0,
		"MultipleChoice": 1,
		"Judge":          2,
	}
)

func (x QuestionType) Enum() *QuestionType {
	p := new(QuestionType)
	*p = x
	return p
}

func (x QuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_eas_api_v1_eas_sales_paper_models_proto_enumTypes[0].Descriptor()
}

func (QuestionType) Type() protoreflect.EnumType {
	return &file_eas_api_v1_eas_sales_paper_models_proto_enumTypes[0]
}

func (x QuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionType.Descriptor instead.
func (QuestionType) EnumDescriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{0}
}

// ===============================试卷模块=========================================
type CreateSalesPaperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperName   string  `protobuf:"bytes,1,opt,name=sales_paper_name,json=paper_name,proto3" json:"sales_paper_name"`
	RecommendTimeLim int64   `protobuf:"varint,2,opt,name=recommend_time_lim,json=recommend_time_lim,proto3" json:"recommend_time_lim"`
	MaxScore         float64 `protobuf:"fixed64,3,opt,name=max_score,json=max_score,proto3" json:"max_score"`
	MinScore         float64 `protobuf:"fixed64,4,opt,name=min_score,json=min_score,proto3" json:"min_score"`
	IsEnabled        bool    `protobuf:"varint,5,opt,name=is_enabled,json=is_enabled,proto3" json:"is_enabled"`
	Mark             string  `protobuf:"bytes,6,opt,name=mark,json=mark,proto3" json:"mark"`
	Expression       string  `protobuf:"bytes,7,opt,name=expression,json=expression,proto3" json:"expression"`
	Rounding         int32   `protobuf:"varint,8,opt,name=rounding,json=rounding,proto3" json:"rounding"`
	IsSumScore       bool    `protobuf:"varint,9,opt,name=is_sum_score,json=is_sum_score,proto3" json:"is_sum_score"`
}

func (x *CreateSalesPaperRequest) Reset() {
	*x = CreateSalesPaperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesPaperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesPaperRequest) ProtoMessage() {}

func (x *CreateSalesPaperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesPaperRequest.ProtoReflect.Descriptor instead.
func (*CreateSalesPaperRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSalesPaperRequest) GetSalesPaperName() string {
	if x != nil {
		return x.SalesPaperName
	}
	return ""
}

func (x *CreateSalesPaperRequest) GetRecommendTimeLim() int64 {
	if x != nil {
		return x.RecommendTimeLim
	}
	return 0
}

func (x *CreateSalesPaperRequest) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *CreateSalesPaperRequest) GetMinScore() float64 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *CreateSalesPaperRequest) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *CreateSalesPaperRequest) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *CreateSalesPaperRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *CreateSalesPaperRequest) GetRounding() int32 {
	if x != nil {
		return x.Rounding
	}
	return 0
}

func (x *CreateSalesPaperRequest) GetIsSumScore() bool {
	if x != nil {
		return x.IsSumScore
	}
	return false
}

type CreateSalesPaperResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSalesPaperResponse) Reset() {
	*x = CreateSalesPaperResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesPaperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesPaperResponse) ProtoMessage() {}

func (x *CreateSalesPaperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesPaperResponse.ProtoReflect.Descriptor instead.
func (*CreateSalesPaperResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{1}
}

type SalesPaperData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId     string  `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
	SalesPaperName   string  `protobuf:"bytes,2,opt,name=sales_paper_name,json=paper_name,proto3" json:"sales_paper_name"`
	RecommendTimeLim int64   `protobuf:"varint,3,opt,name=recommend_time_lim,json=recommend_time_lim,proto3" json:"recommend_time_lim"`
	MaxScore         float64 `protobuf:"fixed64,4,opt,name=max_score,json=max_score,proto3" json:"max_score"`
	MinScore         float64 `protobuf:"fixed64,5,opt,name=min_score,json=min_score,proto3" json:"min_score"`
	Expression       string  `protobuf:"bytes,6,opt,name=expression,json=expression,proto3" json:"expression"`
	Rounding         int32   `protobuf:"varint,7,opt,name=rounding,json=rounding,proto3" json:"rounding"`
	IsEnabled        bool    `protobuf:"varint,8,opt,name=is_enabled,json=is_enabled,proto3" json:"is_enabled"`
	IsUsed           bool    `protobuf:"varint,9,opt,name=is_used,json=is_used,proto3" json:"is_used"`
	Mark             string  `protobuf:"bytes,10,opt,name=mark,json=mark,proto3" json:"mark"`
	IsSumScore       bool    `protobuf:"varint,11,opt,name=is_sum_score,json=is_sum_score,proto3" json:"is_sum_score"`
	UpdatedAt        string  `protobuf:"bytes,12,opt,name=updated_at,json=updated_at,proto3" json:"updated_at"`
	UpdatedBy        string  `protobuf:"bytes,13,opt,name=updated_by,json=updated_by,proto3" json:"updated_by"`
}

func (x *SalesPaperData) Reset() {
	*x = SalesPaperData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPaperData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPaperData) ProtoMessage() {}

func (x *SalesPaperData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPaperData.ProtoReflect.Descriptor instead.
func (*SalesPaperData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{2}
}

func (x *SalesPaperData) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

func (x *SalesPaperData) GetSalesPaperName() string {
	if x != nil {
		return x.SalesPaperName
	}
	return ""
}

func (x *SalesPaperData) GetRecommendTimeLim() int64 {
	if x != nil {
		return x.RecommendTimeLim
	}
	return 0
}

func (x *SalesPaperData) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *SalesPaperData) GetMinScore() float64 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *SalesPaperData) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *SalesPaperData) GetRounding() int32 {
	if x != nil {
		return x.Rounding
	}
	return 0
}

func (x *SalesPaperData) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *SalesPaperData) GetIsUsed() bool {
	if x != nil {
		return x.IsUsed
	}
	return false
}

func (x *SalesPaperData) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *SalesPaperData) GetIsSumScore() bool {
	if x != nil {
		return x.IsSumScore
	}
	return false
}

func (x *SalesPaperData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *SalesPaperData) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type GetSalesPaperPageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyWord          string `protobuf:"bytes,1,opt,name=key_word,json=key_word,proto3" json:"key_word"`
	SalesPaperStatus int64  `protobuf:"varint,2,opt,name=sales_paper_status,json=sales_paper_status,proto3" json:"sales_paper_status"`
	PageIndex        int32  `protobuf:"varint,3,opt,name=page_index,json=page_index,proto3" json:"page_index"`
	PageSize         int32  `protobuf:"varint,4,opt,name=page_size,json=page_size,proto3" json:"page_size"`
}

func (x *GetSalesPaperPageListRequest) Reset() {
	*x = GetSalesPaperPageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperPageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperPageListRequest) ProtoMessage() {}

func (x *GetSalesPaperPageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperPageListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaperPageListRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{3}
}

func (x *GetSalesPaperPageListRequest) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

func (x *GetSalesPaperPageListRequest) GetSalesPaperStatus() int64 {
	if x != nil {
		return x.SalesPaperStatus
	}
	return 0
}

func (x *GetSalesPaperPageListRequest) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetSalesPaperPageListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetSalesPaperPageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperList []*SalesPaperData `protobuf:"bytes,1,rep,name=sales_paper_list,json=sales_paper_list,proto3" json:"sales_paper_list"`
	Total          int64             `protobuf:"varint,2,opt,name=total,json=total,proto3" json:"total"`
}

func (x *GetSalesPaperPageListResponse) Reset() {
	*x = GetSalesPaperPageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperPageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperPageListResponse) ProtoMessage() {}

func (x *GetSalesPaperPageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperPageListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaperPageListResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{4}
}

func (x *GetSalesPaperPageListResponse) GetSalesPaperList() []*SalesPaperData {
	if x != nil {
		return x.SalesPaperList
	}
	return nil
}

func (x *GetSalesPaperPageListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetUsableSalesPaperPageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyWord   string `protobuf:"bytes,1,opt,name=key_word,json=key_word,proto3" json:"key_word"`
	PageIndex int32  `protobuf:"varint,2,opt,name=page_index,json=page_index,proto3" json:"page_index"`
	PageSize  int32  `protobuf:"varint,3,opt,name=page_size,json=page_size,proto3" json:"page_size"`
}

func (x *GetUsableSalesPaperPageListRequest) Reset() {
	*x = GetUsableSalesPaperPageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsableSalesPaperPageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsableSalesPaperPageListRequest) ProtoMessage() {}

func (x *GetUsableSalesPaperPageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsableSalesPaperPageListRequest.ProtoReflect.Descriptor instead.
func (*GetUsableSalesPaperPageListRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{5}
}

func (x *GetUsableSalesPaperPageListRequest) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

func (x *GetUsableSalesPaperPageListRequest) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetUsableSalesPaperPageListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetUsableSalesPaperPageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperList []*SalesPaperData `protobuf:"bytes,1,rep,name=sales_paper_list,json=sales_paper_list,proto3" json:"sales_paper_list"`
	Total          int64             `protobuf:"varint,2,opt,name=total,json=total,proto3" json:"total"`
}

func (x *GetUsableSalesPaperPageListResponse) Reset() {
	*x = GetUsableSalesPaperPageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsableSalesPaperPageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsableSalesPaperPageListResponse) ProtoMessage() {}

func (x *GetUsableSalesPaperPageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsableSalesPaperPageListResponse.ProtoReflect.Descriptor instead.
func (*GetUsableSalesPaperPageListResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{6}
}

func (x *GetUsableSalesPaperPageListResponse) GetSalesPaperList() []*SalesPaperData {
	if x != nil {
		return x.SalesPaperList
	}
	return nil
}

func (x *GetUsableSalesPaperPageListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetSalesPaperDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId string `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
}

func (x *GetSalesPaperDetailRequest) Reset() {
	*x = GetSalesPaperDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDetailRequest) ProtoMessage() {}

func (x *GetSalesPaperDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDetailRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{7}
}

func (x *GetSalesPaperDetailRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

type GetSalesPaperDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaper *SalesPaperData `protobuf:"bytes,1,opt,name=sales_paper,json=sales_paper,proto3" json:"sales_paper"`
}

func (x *GetSalesPaperDetailResponse) Reset() {
	*x = GetSalesPaperDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDetailResponse) ProtoMessage() {}

func (x *GetSalesPaperDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDetailResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{8}
}

func (x *GetSalesPaperDetailResponse) GetSalesPaper() *SalesPaperData {
	if x != nil {
		return x.SalesPaper
	}
	return nil
}

type SetSalesPaperStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId     string           `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
	SalesPaperStatus SalesPaperStatus `protobuf:"varint,2,opt,name=sales_paper_status,json=sales_paper_status,proto3,enum=eas_api.v1.SalesPaperStatus" json:"sales_paper_status"`
}

func (x *SetSalesPaperStatusRequest) Reset() {
	*x = SetSalesPaperStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSalesPaperStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSalesPaperStatusRequest) ProtoMessage() {}

func (x *SetSalesPaperStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSalesPaperStatusRequest.ProtoReflect.Descriptor instead.
func (*SetSalesPaperStatusRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{9}
}

func (x *SetSalesPaperStatusRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

func (x *SetSalesPaperStatusRequest) GetSalesPaperStatus() SalesPaperStatus {
	if x != nil {
		return x.SalesPaperStatus
	}
	return SalesPaperStatus_Disable
}

type SetSalesPaperStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSalesPaperStatusResponse) Reset() {
	*x = SetSalesPaperStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSalesPaperStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSalesPaperStatusResponse) ProtoMessage() {}

func (x *SetSalesPaperStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSalesPaperStatusResponse.ProtoReflect.Descriptor instead.
func (*SetSalesPaperStatusResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{10}
}

type UpdateSalesPaperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId     string  `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
	SalesPaperName   string  `protobuf:"bytes,2,opt,name=sales_paper_name,json=sales_paper_name,proto3" json:"sales_paper_name"`
	RecommendTimeLim int64   `protobuf:"varint,3,opt,name=recommend_time_lim,json=recommend_time_lim,proto3" json:"recommend_time_lim"`
	MaxScore         float64 `protobuf:"fixed64,4,opt,name=max_score,json=max_score,proto3" json:"max_score"`
	MinScore         float64 `protobuf:"fixed64,5,opt,name=min_score,json=min_score,proto3" json:"min_score"`
	IsEnabled        bool    `protobuf:"varint,6,opt,name=is_enabled,json=is_enabled,proto3" json:"is_enabled"`
	Mark             string  `protobuf:"bytes,7,opt,name=mark,json=mark,proto3" json:"mark"`
	Expression       string  `protobuf:"bytes,8,opt,name=expression,json=expression,proto3" json:"expression"`
	Rounding         int32   `protobuf:"varint,9,opt,name=rounding,json=rounding,proto3" json:"rounding"`
	IsSumScore       bool    `protobuf:"varint,10,opt,name=is_sum_score,json=is_sum_score,proto3" json:"is_sum_score"`
}

func (x *UpdateSalesPaperRequest) Reset() {
	*x = UpdateSalesPaperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSalesPaperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSalesPaperRequest) ProtoMessage() {}

func (x *UpdateSalesPaperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSalesPaperRequest.ProtoReflect.Descriptor instead.
func (*UpdateSalesPaperRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateSalesPaperRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

func (x *UpdateSalesPaperRequest) GetSalesPaperName() string {
	if x != nil {
		return x.SalesPaperName
	}
	return ""
}

func (x *UpdateSalesPaperRequest) GetRecommendTimeLim() int64 {
	if x != nil {
		return x.RecommendTimeLim
	}
	return 0
}

func (x *UpdateSalesPaperRequest) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *UpdateSalesPaperRequest) GetMinScore() float64 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *UpdateSalesPaperRequest) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *UpdateSalesPaperRequest) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *UpdateSalesPaperRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *UpdateSalesPaperRequest) GetRounding() int32 {
	if x != nil {
		return x.Rounding
	}
	return 0
}

func (x *UpdateSalesPaperRequest) GetIsSumScore() bool {
	if x != nil {
		return x.IsSumScore
	}
	return false
}

type UpdateSalesPaperResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSalesPaperResponse) Reset() {
	*x = UpdateSalesPaperResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSalesPaperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSalesPaperResponse) ProtoMessage() {}

func (x *UpdateSalesPaperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSalesPaperResponse.ProtoReflect.Descriptor instead.
func (*UpdateSalesPaperResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{12}
}

type DeleteSalesPaperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId string `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
}

func (x *DeleteSalesPaperRequest) Reset() {
	*x = DeleteSalesPaperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSalesPaperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSalesPaperRequest) ProtoMessage() {}

func (x *DeleteSalesPaperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSalesPaperRequest.ProtoReflect.Descriptor instead.
func (*DeleteSalesPaperRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteSalesPaperRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

type DeleteSalesPaperResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSalesPaperResponse) Reset() {
	*x = DeleteSalesPaperResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSalesPaperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSalesPaperResponse) ProtoMessage() {}

func (x *DeleteSalesPaperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSalesPaperResponse.ProtoReflect.Descriptor instead.
func (*DeleteSalesPaperResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{14}
}

// ===============================试卷评语模块=========================================
type SaveSalesPaperCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId string                       `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
	CommentData  []*SaveSalesPaperCommentData `protobuf:"bytes,2,rep,name=comment_data,json=comment_data,proto3" json:"comment_data"`
}

func (x *SaveSalesPaperCommentRequest) Reset() {
	*x = SaveSalesPaperCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSalesPaperCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSalesPaperCommentRequest) ProtoMessage() {}

func (x *SaveSalesPaperCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSalesPaperCommentRequest.ProtoReflect.Descriptor instead.
func (*SaveSalesPaperCommentRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{15}
}

func (x *SaveSalesPaperCommentRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

func (x *SaveSalesPaperCommentRequest) GetCommentData() []*SaveSalesPaperCommentData {
	if x != nil {
		return x.CommentData
	}
	return nil
}

type SaveSalesPaperCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveSalesPaperCommentResponse) Reset() {
	*x = SaveSalesPaperCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSalesPaperCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSalesPaperCommentResponse) ProtoMessage() {}

func (x *SaveSalesPaperCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSalesPaperCommentResponse.ProtoReflect.Descriptor instead.
func (*SaveSalesPaperCommentResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{16}
}

type SaveSalesPaperCommentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperCommentId string  `protobuf:"bytes,1,opt,name=sales_paper_comment_id,json=sales_paper_comment_id,proto3" json:"sales_paper_comment_id"`
	Content             string  `protobuf:"bytes,2,opt,name=content,json=content,proto3" json:"content"`
	UpScore             float64 `protobuf:"fixed64,3,opt,name=up_score,json=up_score,proto3" json:"up_score"`
	LowScore            float64 `protobuf:"fixed64,4,opt,name=low_score,json=low_score,proto3" json:"low_score"`
}

func (x *SaveSalesPaperCommentData) Reset() {
	*x = SaveSalesPaperCommentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSalesPaperCommentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSalesPaperCommentData) ProtoMessage() {}

func (x *SaveSalesPaperCommentData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSalesPaperCommentData.ProtoReflect.Descriptor instead.
func (*SaveSalesPaperCommentData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{17}
}

func (x *SaveSalesPaperCommentData) GetSalesPaperCommentId() string {
	if x != nil {
		return x.SalesPaperCommentId
	}
	return ""
}

func (x *SaveSalesPaperCommentData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SaveSalesPaperCommentData) GetUpScore() float64 {
	if x != nil {
		return x.UpScore
	}
	return 0
}

func (x *SaveSalesPaperCommentData) GetLowScore() float64 {
	if x != nil {
		return x.LowScore
	}
	return 0
}

type SalesPaperCommentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperCommentId string  `protobuf:"bytes,1,opt,name=sales_paper_comment_id,json=sales_paper_comment_id,proto3" json:"sales_paper_comment_id"`
	Content             string  `protobuf:"bytes,2,opt,name=content,json=content,proto3" json:"content"`
	UpScore             float64 `protobuf:"fixed64,3,opt,name=up_score,json=up_score,proto3" json:"up_score"`
	LowScore            float64 `protobuf:"fixed64,4,opt,name=low_score,json=low_score,proto3" json:"low_score"`
	UpdatedAt           string  `protobuf:"bytes,5,opt,name=updated_at,json=updated_at,proto3" json:"updated_at"`
	UpdatedBy           string  `protobuf:"bytes,6,opt,name=updated_by,json=updated_by,proto3" json:"updated_by"`
}

func (x *SalesPaperCommentData) Reset() {
	*x = SalesPaperCommentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPaperCommentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPaperCommentData) ProtoMessage() {}

func (x *SalesPaperCommentData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPaperCommentData.ProtoReflect.Descriptor instead.
func (*SalesPaperCommentData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{18}
}

func (x *SalesPaperCommentData) GetSalesPaperCommentId() string {
	if x != nil {
		return x.SalesPaperCommentId
	}
	return ""
}

func (x *SalesPaperCommentData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SalesPaperCommentData) GetUpScore() float64 {
	if x != nil {
		return x.UpScore
	}
	return 0
}

func (x *SalesPaperCommentData) GetLowScore() float64 {
	if x != nil {
		return x.LowScore
	}
	return 0
}

func (x *SalesPaperCommentData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *SalesPaperCommentData) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type GetSalesPaperCommentListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId string `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
}

func (x *GetSalesPaperCommentListRequest) Reset() {
	*x = GetSalesPaperCommentListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperCommentListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperCommentListRequest) ProtoMessage() {}

func (x *GetSalesPaperCommentListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperCommentListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaperCommentListRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{19}
}

func (x *GetSalesPaperCommentListRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

type GetSalesPaperCommentListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentData []*SalesPaperCommentData `protobuf:"bytes,1,rep,name=comment_data,json=comment_data,proto3" json:"comment_data"`
}

func (x *GetSalesPaperCommentListResponse) Reset() {
	*x = GetSalesPaperCommentListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperCommentListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperCommentListResponse) ProtoMessage() {}

func (x *GetSalesPaperCommentListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperCommentListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaperCommentListResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{20}
}

func (x *GetSalesPaperCommentListResponse) GetCommentData() []*SalesPaperCommentData {
	if x != nil {
		return x.CommentData
	}
	return nil
}

// ===============================维度模块=========================================
type CreateSalesPaperDimensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId  string                           `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
	DimensionData []*CreateSalesPaperDimensionData `protobuf:"bytes,2,rep,name=dimension_data,json=dimension_data,proto3" json:"dimension_data"`
}

func (x *CreateSalesPaperDimensionRequest) Reset() {
	*x = CreateSalesPaperDimensionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesPaperDimensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesPaperDimensionRequest) ProtoMessage() {}

func (x *CreateSalesPaperDimensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesPaperDimensionRequest.ProtoReflect.Descriptor instead.
func (*CreateSalesPaperDimensionRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{21}
}

func (x *CreateSalesPaperDimensionRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

func (x *CreateSalesPaperDimensionRequest) GetDimensionData() []*CreateSalesPaperDimensionData {
	if x != nil {
		return x.DimensionData
	}
	return nil
}

type CreateSalesPaperDimensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSalesPaperDimensionResponse) Reset() {
	*x = CreateSalesPaperDimensionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesPaperDimensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesPaperDimensionResponse) ProtoMessage() {}

func (x *CreateSalesPaperDimensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesPaperDimensionResponse.ProtoReflect.Descriptor instead.
func (*CreateSalesPaperDimensionResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{22}
}

type CreateSalesPaperDimensionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DimensionId   string  `protobuf:"bytes,1,opt,name=dimension_id,json=dimension_id,proto3" json:"dimension_id"`
	DimensionName string  `protobuf:"bytes,2,opt,name=dimension_name,json=dimension_name,proto3" json:"dimension_name"`
	AverageMark   float64 `protobuf:"fixed64,3,opt,name=average_mark,json=average_mark,proto3" json:"average_mark"`
	StandardMark  float64 `protobuf:"fixed64,4,opt,name=standard_mark,json=standard_mark,proto3" json:"standard_mark"`
	Description   string  `protobuf:"bytes,5,opt,name=description,json=description,proto3" json:"description"`
	MaxScore      float64 `protobuf:"fixed64,6,opt,name=max_score,json=max_score,proto3" json:"max_score"`
	MinScore      float64 `protobuf:"fixed64,7,opt,name=min_score,json=min_score,proto3" json:"min_score"`
	IsChoose      bool    `protobuf:"varint,8,opt,name=is_choose,json=is_choose,proto3" json:"is_choose"`
}

func (x *CreateSalesPaperDimensionData) Reset() {
	*x = CreateSalesPaperDimensionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesPaperDimensionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesPaperDimensionData) ProtoMessage() {}

func (x *CreateSalesPaperDimensionData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesPaperDimensionData.ProtoReflect.Descriptor instead.
func (*CreateSalesPaperDimensionData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{23}
}

func (x *CreateSalesPaperDimensionData) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

func (x *CreateSalesPaperDimensionData) GetDimensionName() string {
	if x != nil {
		return x.DimensionName
	}
	return ""
}

func (x *CreateSalesPaperDimensionData) GetAverageMark() float64 {
	if x != nil {
		return x.AverageMark
	}
	return 0
}

func (x *CreateSalesPaperDimensionData) GetStandardMark() float64 {
	if x != nil {
		return x.StandardMark
	}
	return 0
}

func (x *CreateSalesPaperDimensionData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSalesPaperDimensionData) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *CreateSalesPaperDimensionData) GetMinScore() float64 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *CreateSalesPaperDimensionData) GetIsChoose() bool {
	if x != nil {
		return x.IsChoose
	}
	return false
}

type SalesPaperDimensionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DimensionId   string  `protobuf:"bytes,1,opt,name=dimension_id,json=dimension_id,proto3" json:"dimension_id"`
	DimensionName string  `protobuf:"bytes,2,opt,name=dimension_name,json=dimension_name,proto3" json:"dimension_name"`
	AverageMark   float64 `protobuf:"fixed64,3,opt,name=average_mark,json=average_mark,proto3" json:"average_mark"`
	StandardMark  float64 `protobuf:"fixed64,4,opt,name=standard_mark,json=standard_mark,proto3" json:"standard_mark"`
	Description   string  `protobuf:"bytes,5,opt,name=description,json=description,proto3" json:"description"`
	MaxScore      float64 `protobuf:"fixed64,6,opt,name=max_score,json=max_score,proto3" json:"max_score"`
	MinScore      float64 `protobuf:"fixed64,7,opt,name=min_score,json=min_score,proto3" json:"min_score"`
	IsChoose      bool    `protobuf:"varint,8,opt,name=is_choose,json=is_choose,proto3" json:"is_choose"`
	UpdatedAt     string  `protobuf:"bytes,9,opt,name=updated_at,json=updated_at,proto3" json:"updated_at"`
	UpdatedBy     string  `protobuf:"bytes,10,opt,name=updated_by,json=updated_by,proto3" json:"updated_by"`
}

func (x *SalesPaperDimensionData) Reset() {
	*x = SalesPaperDimensionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPaperDimensionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPaperDimensionData) ProtoMessage() {}

func (x *SalesPaperDimensionData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPaperDimensionData.ProtoReflect.Descriptor instead.
func (*SalesPaperDimensionData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{24}
}

func (x *SalesPaperDimensionData) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

func (x *SalesPaperDimensionData) GetDimensionName() string {
	if x != nil {
		return x.DimensionName
	}
	return ""
}

func (x *SalesPaperDimensionData) GetAverageMark() float64 {
	if x != nil {
		return x.AverageMark
	}
	return 0
}

func (x *SalesPaperDimensionData) GetStandardMark() float64 {
	if x != nil {
		return x.StandardMark
	}
	return 0
}

func (x *SalesPaperDimensionData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SalesPaperDimensionData) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *SalesPaperDimensionData) GetMinScore() float64 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *SalesPaperDimensionData) GetIsChoose() bool {
	if x != nil {
		return x.IsChoose
	}
	return false
}

func (x *SalesPaperDimensionData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *SalesPaperDimensionData) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type GetSalesPaperDimensionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId string `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
}

func (x *GetSalesPaperDimensionListRequest) Reset() {
	*x = GetSalesPaperDimensionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionListRequest) ProtoMessage() {}

func (x *GetSalesPaperDimensionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionListRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{25}
}

func (x *GetSalesPaperDimensionListRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

type GetSalesPaperDimensionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DimensionData []*SalesPaperDimensionData `protobuf:"bytes,1,rep,name=dimension_data,json=dimension_data,proto3" json:"dimension_data"`
}

func (x *GetSalesPaperDimensionListResponse) Reset() {
	*x = GetSalesPaperDimensionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionListResponse) ProtoMessage() {}

func (x *GetSalesPaperDimensionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionListResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{26}
}

func (x *GetSalesPaperDimensionListResponse) GetDimensionData() []*SalesPaperDimensionData {
	if x != nil {
		return x.DimensionData
	}
	return nil
}

type GetSalesPaperDimensionDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DimensionId string `protobuf:"bytes,1,opt,name=dimension_id,json=dimension_id,proto3" json:"dimension_id"`
}

func (x *GetSalesPaperDimensionDetailRequest) Reset() {
	*x = GetSalesPaperDimensionDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionDetailRequest) ProtoMessage() {}

func (x *GetSalesPaperDimensionDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionDetailRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{27}
}

func (x *GetSalesPaperDimensionDetailRequest) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

type GetSalesPaperDimensionDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperDimension *SalesPaperDimensionData `protobuf:"bytes,1,opt,name=sales_paper_dimension,json=sales_paper_dimension,proto3" json:"sales_paper_dimension"`
}

func (x *GetSalesPaperDimensionDetailResponse) Reset() {
	*x = GetSalesPaperDimensionDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionDetailResponse) ProtoMessage() {}

func (x *GetSalesPaperDimensionDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionDetailResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{28}
}

func (x *GetSalesPaperDimensionDetailResponse) GetSalesPaperDimension() *SalesPaperDimensionData {
	if x != nil {
		return x.SalesPaperDimension
	}
	return nil
}

type UpdateSalesPaperDimensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId  string                           `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
	DimensionData []*CreateSalesPaperDimensionData `protobuf:"bytes,2,rep,name=dimension_data,json=dimension_data,proto3" json:"dimension_data"`
}

func (x *UpdateSalesPaperDimensionRequest) Reset() {
	*x = UpdateSalesPaperDimensionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSalesPaperDimensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSalesPaperDimensionRequest) ProtoMessage() {}

func (x *UpdateSalesPaperDimensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSalesPaperDimensionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSalesPaperDimensionRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateSalesPaperDimensionRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

func (x *UpdateSalesPaperDimensionRequest) GetDimensionData() []*CreateSalesPaperDimensionData {
	if x != nil {
		return x.DimensionData
	}
	return nil
}

type UpdateSalesPaperDimensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSalesPaperDimensionResponse) Reset() {
	*x = UpdateSalesPaperDimensionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSalesPaperDimensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSalesPaperDimensionResponse) ProtoMessage() {}

func (x *UpdateSalesPaperDimensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSalesPaperDimensionResponse.ProtoReflect.Descriptor instead.
func (*UpdateSalesPaperDimensionResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{30}
}

type DeleteSalesPaperDimensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId          string `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
	SalesPaperDimensionId string `protobuf:"bytes,2,opt,name=sales_paper_dimension_id,json=sales_paper_dimension_id,proto3" json:"sales_paper_dimension_id"`
}

func (x *DeleteSalesPaperDimensionRequest) Reset() {
	*x = DeleteSalesPaperDimensionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSalesPaperDimensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSalesPaperDimensionRequest) ProtoMessage() {}

func (x *DeleteSalesPaperDimensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSalesPaperDimensionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSalesPaperDimensionRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteSalesPaperDimensionRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

func (x *DeleteSalesPaperDimensionRequest) GetSalesPaperDimensionId() string {
	if x != nil {
		return x.SalesPaperDimensionId
	}
	return ""
}

type DeleteSalesPaperDimensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSalesPaperDimensionResponse) Reset() {
	*x = DeleteSalesPaperDimensionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSalesPaperDimensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSalesPaperDimensionResponse) ProtoMessage() {}

func (x *DeleteSalesPaperDimensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSalesPaperDimensionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSalesPaperDimensionResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{32}
}

// ===============================试卷维度评语模块=========================================
type SaveSalesPaperDimensionCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperDimensionId string                                `protobuf:"bytes,1,opt,name=sales_paper_dimension_id,json=sales_paper_dimension_id,proto3" json:"sales_paper_dimension_id"`
	DimensionCommentData  []*SaveSalesPaperDimensionCommentData `protobuf:"bytes,2,rep,name=dimension_comment_data,json=dimension_comment_data,proto3" json:"dimension_comment_data"`
}

func (x *SaveSalesPaperDimensionCommentRequest) Reset() {
	*x = SaveSalesPaperDimensionCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSalesPaperDimensionCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSalesPaperDimensionCommentRequest) ProtoMessage() {}

func (x *SaveSalesPaperDimensionCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSalesPaperDimensionCommentRequest.ProtoReflect.Descriptor instead.
func (*SaveSalesPaperDimensionCommentRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{33}
}

func (x *SaveSalesPaperDimensionCommentRequest) GetSalesPaperDimensionId() string {
	if x != nil {
		return x.SalesPaperDimensionId
	}
	return ""
}

func (x *SaveSalesPaperDimensionCommentRequest) GetDimensionCommentData() []*SaveSalesPaperDimensionCommentData {
	if x != nil {
		return x.DimensionCommentData
	}
	return nil
}

type SaveSalesPaperDimensionCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveSalesPaperDimensionCommentResponse) Reset() {
	*x = SaveSalesPaperDimensionCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSalesPaperDimensionCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSalesPaperDimensionCommentResponse) ProtoMessage() {}

func (x *SaveSalesPaperDimensionCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSalesPaperDimensionCommentResponse.ProtoReflect.Descriptor instead.
func (*SaveSalesPaperDimensionCommentResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{34}
}

type SaveSalesPaperDimensionCommentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperDimensionCommentId string  `protobuf:"bytes,1,opt,name=sales_paper_dimension_comment_id,json=sales_paper_dimension_comment_id,proto3" json:"sales_paper_dimension_comment_id"`
	Content                      string  `protobuf:"bytes,2,opt,name=content,json=content,proto3" json:"content"`
	UpScore                      float64 `protobuf:"fixed64,3,opt,name=up_score,json=up_score,proto3" json:"up_score"`
	LowScore                     float64 `protobuf:"fixed64,4,opt,name=low_score,json=low_score,proto3" json:"low_score"`
}

func (x *SaveSalesPaperDimensionCommentData) Reset() {
	*x = SaveSalesPaperDimensionCommentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSalesPaperDimensionCommentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSalesPaperDimensionCommentData) ProtoMessage() {}

func (x *SaveSalesPaperDimensionCommentData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSalesPaperDimensionCommentData.ProtoReflect.Descriptor instead.
func (*SaveSalesPaperDimensionCommentData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{35}
}

func (x *SaveSalesPaperDimensionCommentData) GetSalesPaperDimensionCommentId() string {
	if x != nil {
		return x.SalesPaperDimensionCommentId
	}
	return ""
}

func (x *SaveSalesPaperDimensionCommentData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SaveSalesPaperDimensionCommentData) GetUpScore() float64 {
	if x != nil {
		return x.UpScore
	}
	return 0
}

func (x *SaveSalesPaperDimensionCommentData) GetLowScore() float64 {
	if x != nil {
		return x.LowScore
	}
	return 0
}

type SalesPaperDimensionCommentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperDimensionCommentId string  `protobuf:"bytes,1,opt,name=sales_paper_dimension_comment_id,json=sales_paper_dimension_comment_id,proto3" json:"sales_paper_dimension_comment_id"`
	Content                      string  `protobuf:"bytes,2,opt,name=content,json=content,proto3" json:"content"`
	UpScore                      float64 `protobuf:"fixed64,3,opt,name=up_score,json=up_score,proto3" json:"up_score"`
	LowScore                     float64 `protobuf:"fixed64,4,opt,name=low_score,json=low_score,proto3" json:"low_score"`
	UpdatedAt                    string  `protobuf:"bytes,5,opt,name=updated_at,json=updated_at,proto3" json:"updated_at"`
	UpdatedBy                    string  `protobuf:"bytes,6,opt,name=updated_by,json=updated_by,proto3" json:"updated_by"`
}

func (x *SalesPaperDimensionCommentData) Reset() {
	*x = SalesPaperDimensionCommentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPaperDimensionCommentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPaperDimensionCommentData) ProtoMessage() {}

func (x *SalesPaperDimensionCommentData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPaperDimensionCommentData.ProtoReflect.Descriptor instead.
func (*SalesPaperDimensionCommentData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{36}
}

func (x *SalesPaperDimensionCommentData) GetSalesPaperDimensionCommentId() string {
	if x != nil {
		return x.SalesPaperDimensionCommentId
	}
	return ""
}

func (x *SalesPaperDimensionCommentData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SalesPaperDimensionCommentData) GetUpScore() float64 {
	if x != nil {
		return x.UpScore
	}
	return 0
}

func (x *SalesPaperDimensionCommentData) GetLowScore() float64 {
	if x != nil {
		return x.LowScore
	}
	return 0
}

func (x *SalesPaperDimensionCommentData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *SalesPaperDimensionCommentData) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type GetSalesPaperDimensionCommentListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperDimensionId string `protobuf:"bytes,1,opt,name=sales_paper_dimension_id,json=sales_paper_dimension_id,proto3" json:"sales_paper_dimension_id"`
}

func (x *GetSalesPaperDimensionCommentListRequest) Reset() {
	*x = GetSalesPaperDimensionCommentListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionCommentListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionCommentListRequest) ProtoMessage() {}

func (x *GetSalesPaperDimensionCommentListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionCommentListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionCommentListRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{37}
}

func (x *GetSalesPaperDimensionCommentListRequest) GetSalesPaperDimensionId() string {
	if x != nil {
		return x.SalesPaperDimensionId
	}
	return ""
}

type GetSalesPaperDimensionCommentListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DimensionCommentData []*SalesPaperDimensionCommentData `protobuf:"bytes,1,rep,name=dimension_comment_data,json=dimension_comment_data,proto3" json:"dimension_comment_data"`
}

func (x *GetSalesPaperDimensionCommentListResponse) Reset() {
	*x = GetSalesPaperDimensionCommentListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionCommentListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionCommentListResponse) ProtoMessage() {}

func (x *GetSalesPaperDimensionCommentListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionCommentListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionCommentListResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{38}
}

func (x *GetSalesPaperDimensionCommentListResponse) GetDimensionCommentData() []*SalesPaperDimensionCommentData {
	if x != nil {
		return x.DimensionCommentData
	}
	return nil
}

// ===============================试卷维度题目模块=========================================
type SaveSalesPaperDimensionQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId          string            `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
	SalesPaperDimensionId string            `protobuf:"bytes,2,opt,name=sales_paper_dimension_id,json=sales_paper_dimension_id,proto3" json:"sales_paper_dimension_id"`
	QuestionData          *SaveQuestionData `protobuf:"bytes,3,opt,name=question_data,json=question_data,proto3" json:"question_data"`
}

func (x *SaveSalesPaperDimensionQuestionRequest) Reset() {
	*x = SaveSalesPaperDimensionQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSalesPaperDimensionQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSalesPaperDimensionQuestionRequest) ProtoMessage() {}

func (x *SaveSalesPaperDimensionQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSalesPaperDimensionQuestionRequest.ProtoReflect.Descriptor instead.
func (*SaveSalesPaperDimensionQuestionRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{39}
}

func (x *SaveSalesPaperDimensionQuestionRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

func (x *SaveSalesPaperDimensionQuestionRequest) GetSalesPaperDimensionId() string {
	if x != nil {
		return x.SalesPaperDimensionId
	}
	return ""
}

func (x *SaveSalesPaperDimensionQuestionRequest) GetQuestionData() *SaveQuestionData {
	if x != nil {
		return x.QuestionData
	}
	return nil
}

type SaveSalesPaperDimensionQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveSalesPaperDimensionQuestionResponse) Reset() {
	*x = SaveSalesPaperDimensionQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSalesPaperDimensionQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSalesPaperDimensionQuestionResponse) ProtoMessage() {}

func (x *SaveSalesPaperDimensionQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSalesPaperDimensionQuestionResponse.ProtoReflect.Descriptor instead.
func (*SaveSalesPaperDimensionQuestionResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{40}
}

type SaveQuestionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId     string                    `protobuf:"bytes,1,opt,name=question_id,json=question_id,proto3" json:"question_id"`
	Title          string                    `protobuf:"bytes,2,opt,name=title,json=title,proto3" json:"title"`
	Remark         string                    `protobuf:"bytes,3,opt,name=remark,json=remark,proto3" json:"remark"`
	QuestionTypeId QuestionType              `protobuf:"varint,4,opt,name=question_type_id,json=question_type_id,proto3,enum=eas_api.v1.QuestionType" json:"question_type_id"`
	Order          int32                     `protobuf:"varint,5,opt,name=order,json=order,proto3" json:"order"`
	Options        []*SaveQuestionOptionData `protobuf:"bytes,6,rep,name=options,json=options,proto3" json:"options"`
}

func (x *SaveQuestionData) Reset() {
	*x = SaveQuestionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveQuestionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveQuestionData) ProtoMessage() {}

func (x *SaveQuestionData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveQuestionData.ProtoReflect.Descriptor instead.
func (*SaveQuestionData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{41}
}

func (x *SaveQuestionData) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *SaveQuestionData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SaveQuestionData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SaveQuestionData) GetQuestionTypeId() QuestionType {
	if x != nil {
		return x.QuestionTypeId
	}
	return QuestionType_RadioChoice
}

func (x *SaveQuestionData) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *SaveQuestionData) GetOptions() []*SaveQuestionOptionData {
	if x != nil {
		return x.Options
	}
	return nil
}

type SaveQuestionOptionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionOptionId string  `protobuf:"bytes,1,opt,name=question_option_id,json=question_option_id,proto3" json:"question_option_id"`
	Description      string  `protobuf:"bytes,2,opt,name=description,json=description,proto3" json:"description"`
	Score            float64 `protobuf:"fixed64,3,opt,name=score,json=score,proto3" json:"score"`
	Order            int32   `protobuf:"varint,4,opt,name=order,json=order,proto3" json:"order"`
}

func (x *SaveQuestionOptionData) Reset() {
	*x = SaveQuestionOptionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveQuestionOptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveQuestionOptionData) ProtoMessage() {}

func (x *SaveQuestionOptionData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveQuestionOptionData.ProtoReflect.Descriptor instead.
func (*SaveQuestionOptionData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{42}
}

func (x *SaveQuestionOptionData) GetQuestionOptionId() string {
	if x != nil {
		return x.QuestionOptionId
	}
	return ""
}

func (x *SaveQuestionOptionData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SaveQuestionOptionData) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SaveQuestionOptionData) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type QuestionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId           string                `protobuf:"bytes,1,opt,name=question_id,json=question_id,proto3" json:"question_id"`
	Title                string                `protobuf:"bytes,2,opt,name=title,json=title,proto3" json:"title"`
	Remark               string                `protobuf:"bytes,3,opt,name=remark,json=remark,proto3" json:"remark"`
	QuestionTypeId       QuestionType          `protobuf:"varint,4,opt,name=question_type_id,json=question_type_id,proto3,enum=eas_api.v1.QuestionType" json:"question_type_id"`
	Order                int32                 `protobuf:"varint,5,opt,name=order,json=order,proto3" json:"order"`
	SalePaperId          string                `protobuf:"bytes,6,opt,name=sale_paper_id,json=sale_paper_id,proto3" json:"sale_paper_id"`
	SalePaperDimensionId string                `protobuf:"bytes,7,opt,name=sale_paper_dimension_id,json=sale_paper_dimension_id,proto3" json:"sale_paper_dimension_id"`
	UpdatedAt            string                `protobuf:"bytes,8,opt,name=updated_at,json=updated_at,proto3" json:"updated_at"`
	UpdatedBy            string                `protobuf:"bytes,9,opt,name=updated_by,json=updated_by,proto3" json:"updated_by"`
	QuestionOptionsData  []*QuestionOptionData `protobuf:"bytes,10,rep,name=question_options_data,json=question_options_data,proto3" json:"question_options_data"`
}

func (x *QuestionData) Reset() {
	*x = QuestionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionData) ProtoMessage() {}

func (x *QuestionData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionData.ProtoReflect.Descriptor instead.
func (*QuestionData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{43}
}

func (x *QuestionData) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *QuestionData) GetQuestionTypeId() QuestionType {
	if x != nil {
		return x.QuestionTypeId
	}
	return QuestionType_RadioChoice
}

func (x *QuestionData) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *QuestionData) GetSalePaperId() string {
	if x != nil {
		return x.SalePaperId
	}
	return ""
}

func (x *QuestionData) GetSalePaperDimensionId() string {
	if x != nil {
		return x.SalePaperDimensionId
	}
	return ""
}

func (x *QuestionData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *QuestionData) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *QuestionData) GetQuestionOptionsData() []*QuestionOptionData {
	if x != nil {
		return x.QuestionOptionsData
	}
	return nil
}

type QuestionOptionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionOptionId string  `protobuf:"bytes,1,opt,name=question_option_id,json=question_option_id,proto3" json:"question_option_id"`
	Description      string  `protobuf:"bytes,2,opt,name=description,json=description,proto3" json:"description"`
	Score            float64 `protobuf:"fixed64,3,opt,name=score,json=score,proto3" json:"score"`
	Order            int32   `protobuf:"varint,4,opt,name=order,json=order,proto3" json:"order"`
	UpdatedAt        string  `protobuf:"bytes,5,opt,name=updated_at,json=updated_at,proto3" json:"updated_at"`
	UpdatedBy        string  `protobuf:"bytes,6,opt,name=updated_by,json=updated_by,proto3" json:"updated_by"`
	SerialNumber     string  `protobuf:"bytes,7,opt,name=serial_number,json=serial_number,proto3" json:"serial_number"`
}

func (x *QuestionOptionData) Reset() {
	*x = QuestionOptionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionOptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionOptionData) ProtoMessage() {}

func (x *QuestionOptionData) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionOptionData.ProtoReflect.Descriptor instead.
func (*QuestionOptionData) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{44}
}

func (x *QuestionOptionData) GetQuestionOptionId() string {
	if x != nil {
		return x.QuestionOptionId
	}
	return ""
}

func (x *QuestionOptionData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QuestionOptionData) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QuestionOptionData) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *QuestionOptionData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *QuestionOptionData) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *QuestionOptionData) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type GetSalesPaperDimensionQuestionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId string `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
}

func (x *GetSalesPaperDimensionQuestionListRequest) Reset() {
	*x = GetSalesPaperDimensionQuestionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionQuestionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionQuestionListRequest) ProtoMessage() {}

func (x *GetSalesPaperDimensionQuestionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionQuestionListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionQuestionListRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{45}
}

func (x *GetSalesPaperDimensionQuestionListRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

type GetSalesPaperDimensionQuestionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionData []*QuestionData `protobuf:"bytes,1,rep,name=question_data,json=question_data,proto3" json:"question_data"`
}

func (x *GetSalesPaperDimensionQuestionListResponse) Reset() {
	*x = GetSalesPaperDimensionQuestionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionQuestionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionQuestionListResponse) ProtoMessage() {}

func (x *GetSalesPaperDimensionQuestionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionQuestionListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionQuestionListResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{46}
}

func (x *GetSalesPaperDimensionQuestionListResponse) GetQuestionData() []*QuestionData {
	if x != nil {
		return x.QuestionData
	}
	return nil
}

type GetSalesPaperDimensionQuestionDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId string `protobuf:"bytes,1,opt,name=question_id,json=question_id,proto3" json:"question_id"`
}

func (x *GetSalesPaperDimensionQuestionDetailRequest) Reset() {
	*x = GetSalesPaperDimensionQuestionDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionQuestionDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionQuestionDetailRequest) ProtoMessage() {}

func (x *GetSalesPaperDimensionQuestionDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionQuestionDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionQuestionDetailRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{47}
}

func (x *GetSalesPaperDimensionQuestionDetailRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

type GetSalesPaperDimensionQuestionDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionData *QuestionData `protobuf:"bytes,1,opt,name=question_data,json=question_data,proto3" json:"question_data"`
}

func (x *GetSalesPaperDimensionQuestionDetailResponse) Reset() {
	*x = GetSalesPaperDimensionQuestionDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionQuestionDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionQuestionDetailResponse) ProtoMessage() {}

func (x *GetSalesPaperDimensionQuestionDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionQuestionDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionQuestionDetailResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{48}
}

func (x *GetSalesPaperDimensionQuestionDetailResponse) GetQuestionData() *QuestionData {
	if x != nil {
		return x.QuestionData
	}
	return nil
}

type DeleteSalesPaperDimensionQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId string `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
	QuestionId   string `protobuf:"bytes,2,opt,name=question_id,json=question_id,proto3" json:"question_id"`
}

func (x *DeleteSalesPaperDimensionQuestionRequest) Reset() {
	*x = DeleteSalesPaperDimensionQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSalesPaperDimensionQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSalesPaperDimensionQuestionRequest) ProtoMessage() {}

func (x *DeleteSalesPaperDimensionQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSalesPaperDimensionQuestionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSalesPaperDimensionQuestionRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteSalesPaperDimensionQuestionRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

func (x *DeleteSalesPaperDimensionQuestionRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

type DeleteSalesPaperDimensionQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSalesPaperDimensionQuestionResponse) Reset() {
	*x = DeleteSalesPaperDimensionQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSalesPaperDimensionQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSalesPaperDimensionQuestionResponse) ProtoMessage() {}

func (x *DeleteSalesPaperDimensionQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSalesPaperDimensionQuestionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSalesPaperDimensionQuestionResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{50}
}

type GetSalesPaperDimensionQuestionPreViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesPaperId string `protobuf:"bytes,1,opt,name=sales_paper_id,json=sales_paper_id,proto3" json:"sales_paper_id"`
}

func (x *GetSalesPaperDimensionQuestionPreViewRequest) Reset() {
	*x = GetSalesPaperDimensionQuestionPreViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionQuestionPreViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionQuestionPreViewRequest) ProtoMessage() {}

func (x *GetSalesPaperDimensionQuestionPreViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionQuestionPreViewRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionQuestionPreViewRequest) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{51}
}

func (x *GetSalesPaperDimensionQuestionPreViewRequest) GetSalesPaperId() string {
	if x != nil {
		return x.SalesPaperId
	}
	return ""
}

type GetSalesPaperDimensionQuestionPreViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionData []*QuestionData `protobuf:"bytes,1,rep,name=question_data,json=question_data,proto3" json:"question_data"`
}

func (x *GetSalesPaperDimensionQuestionPreViewResponse) Reset() {
	*x = GetSalesPaperDimensionQuestionPreViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaperDimensionQuestionPreViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaperDimensionQuestionPreViewResponse) ProtoMessage() {}

func (x *GetSalesPaperDimensionQuestionPreViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaperDimensionQuestionPreViewResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaperDimensionQuestionPreViewResponse) Descriptor() ([]byte, []int) {
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP(), []int{52}
}

func (x *GetSalesPaperDimensionQuestionPreViewResponse) GetQuestionData() []*QuestionData {
	if x != nil {
		return x.QuestionData
	}
	return nil
}

var File_eas_api_v1_eas_sales_paper_models_proto protoreflect.FileDescriptor

var file_eas_api_v1_eas_sales_paper_models_proto_rawDesc = []byte{
	0x0a, 0x27, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x61, 0x73,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x61, 0x73, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfc, 0x04, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x10, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0c, 0xe8,
	0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x78, 0x14, 0x80, 0x01, 0x01,
	0xd2, 0x01, 0x0a, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x1b, 0xe6, 0x8e, 0xa8, 0xe8,
	0x8d, 0x90, 0xe4, 0xbd, 0x9c, 0xe7, 0xad, 0x94, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0xef, 0xbc,
	0x9a, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0xd2, 0x01, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x52, 0x12, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x12, 0x41, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98,
	0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xd2, 0x01, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x12, 0xe6, 0x9c, 0x80,
	0xe4, 0xbd, 0x8e, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0xd2,
	0x01, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a,
	0x1e, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x2c, 0x31, 0x2e,
	0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x3b, 0x30, 0x2e, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xd2,
	0x01, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x0a, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x06, 0xe5, 0xa4, 0x87,
	0xe6, 0xb3, 0xa8, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x15, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe5, 0x88, 0x86, 0xe8, 0xae, 0xa1,
	0xe7, 0xae, 0x97, 0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x8f, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe4, 0xbf,
	0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xb0, 0x8f, 0xe6, 0x95, 0xb0, 0xe4, 0xbd, 0x8d, 0x52, 0x08, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x24, 0x92,
	0x41, 0x21, 0x2a, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8,
	0xe6, 0x80, 0xbb, 0xe5, 0x88, 0x86, 0xd2, 0x01, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x06,
	0x0a, 0x0e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x0e, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x10, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xaf,
	0x95, 0xe5, 0x8d, 0xb7, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x70, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x1b, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe4,
	0xbd, 0x9c, 0xe7, 0xad, 0x94, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0xef, 0xbc, 0x9a, 0xe5, 0x88,
	0x86, 0xe9, 0x92, 0x9f, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe4, 0xb8,
	0x8a, 0xe9, 0x99, 0x90, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe5,
	0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x15, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe5, 0x88, 0x86, 0xe8, 0xae, 0xa1, 0xe7, 0xae, 0x97,
	0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x8f, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe4, 0xbf, 0x9d, 0xe7, 0x95,
	0x99, 0xe5, 0xb0, 0x8f, 0xe6, 0x95, 0xb0, 0xe4, 0xbd, 0x8d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x1e, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x2c, 0x31, 0x2e, 0xe5, 0x90,
	0xaf, 0xe7, 0x94, 0xa8, 0x3b, 0x30, 0x2e, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x52, 0x0a, 0x69,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a,
	0x21, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x2c, 0x31, 0x2e,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x3b, 0x30, 0x2e, 0xe6, 0x9c, 0xaa, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0x52, 0x07, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x06,
	0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3b, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe6, 0x80, 0xbb, 0xe5, 0x88, 0x86, 0x52, 0x0c, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe6, 0x9c, 0x80,
	0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0xba, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0x96, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x2a, 0x0f, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0xe5, 0x90, 0x8d, 0xe6, 0x90, 0x9c, 0xe7, 0xb4,
	0xa2, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x62, 0x0a, 0x12, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x29, 0xe8, 0xaf,
	0x95, 0xe5, 0x8d, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x31, 0x2e, 0xe5, 0x90, 0xaf,
	0xe7, 0x94, 0xa8, 0x3b, 0x30, 0x2e, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x9b, 0x2d,
	0x31, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x12, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x2a, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81,
	0x3a, 0x01, 0x31, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x30, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x09, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6,
	0x95, 0xb0, 0x3a, 0x02, 0x31, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x0c,
	0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x10, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x2a, 0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xb8, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a,
	0x0f, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0xe5, 0x90, 0x8d, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e,
	0x92, 0x41, 0x0b, 0x2a, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0x3a, 0x01, 0x31, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0x92,
	0x41, 0x0f, 0x2a, 0x09, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x3a, 0x02, 0x31,
	0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa3, 0x01, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50,
	0x61, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a,
	0x0c, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x10, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b,
	0x92, 0x41, 0x08, 0x2a, 0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x64, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0xe8,
	0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50,
	0x61, 0x70, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8,
	0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x22, 0xed, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0x69, 0x64, 0xd2, 0x01,
	0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52,
	0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12,
	0x86, 0x01, 0x0a, 0x12, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65,
	0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50,
	0x61, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a,
	0x1e, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x31, 0x2e,
	0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x3b, 0x30, 0x2e, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xd2,
	0x01, 0x12, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x05, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b,
	0x2a, 0x08, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x10, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0c, 0xe8, 0xaf, 0x95, 0xe5,
	0x8d, 0xb7, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x78, 0x14, 0x80, 0x01, 0x01, 0xd2, 0x01, 0x10,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x10, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x35,
	0x92, 0x41, 0x32, 0x2a, 0x1b, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe4, 0xbd, 0x9c, 0xe7, 0xad,
	0x94, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f,
	0xd2, 0x01, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x12, 0x41, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe4,
	0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xd2, 0x01, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe5, 0x88, 0x86, 0xe6,
	0x95, 0xb0, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0xd2, 0x01, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x50, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x1e, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x2c, 0x31, 0x2e, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x3b,
	0x30, 0x2e, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xd2, 0x01, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0x92, 0x41, 0x08, 0x2a, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x04, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x15, 0xe6, 0xa0, 0x87,
	0xe5, 0x87, 0x86, 0xe5, 0x88, 0x86, 0xe8, 0xae, 0xa1, 0xe7, 0xae, 0x97, 0xe5, 0x85, 0xac, 0xe5,
	0xbc, 0x8f, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xb0, 0x8f,
	0xe6, 0x95, 0xb0, 0xe4, 0xbd, 0x8d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe6, 0x80, 0xbb, 0xe5, 0x88, 0x86, 0x52,
	0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x1a, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x2a, 0x08, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x1c, 0x53, 0x61, 0x76,
	0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x6b, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0c, 0xe8, 0xaf, 0x84, 0xe8, 0xaf,
	0xad, 0xe9, 0x9b, 0x86, 0xe5, 0x90, 0x88, 0xd2, 0x01, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x61, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x19, 0x53, 0x61, 0x76, 0x65, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x16, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x16, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x52, 0x16, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x0c,
	0xe8, 0xaf, 0x84, 0xe8, 0xaf, 0xad, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xd2, 0x01, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x08, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x15, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0x86, 0xe6, 0x95, 0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe7, 0x82, 0xb9, 0xd2, 0x01, 0x08,
	0x75, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x08, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x15, 0xe4, 0xb8, 0x8b, 0xe9,
	0x99, 0x90, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe7, 0x82,
	0xb9, 0xd2, 0x01, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xfa, 0x02, 0x0a, 0x15, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x53, 0x0a, 0x16, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x16, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x52,
	0x16, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8,
	0xaf, 0x84, 0xe8, 0xaf, 0xad, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x15, 0xe4, 0xb8, 0x8a,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe7,
	0x82, 0xb9, 0x52, 0x08, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x15, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0x86, 0xe6,
	0x95, 0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe7, 0x82, 0xb9, 0x52, 0x09, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12,
	0x34, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0xba, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0x6f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xaf, 0x84, 0xe8, 0xaf, 0xad,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x75, 0x0a, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a,
	0x0c, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe9, 0x9b, 0x86, 0xe5, 0x90, 0x88, 0xd2, 0x01, 0x0e,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x23,
	0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb7, 0x04, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x0c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x0c,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0e,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0c, 0xe7, 0xbb, 0xb4, 0xe5, 0xba,
	0xa6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xd2, 0x01, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x09, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe5, 0x88, 0x86, 0xd2, 0x01,
	0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0c, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x44, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe5,
	0xb7, 0xae, 0xd2, 0x01, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0xe6, 0x8f, 0x8f,
	0xe8, 0xbf, 0xb0, 0xd2, 0x01, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe5, 0x88,
	0x86, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xd2, 0x01, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x41, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe4, 0xbd,
	0x8e, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0xd2, 0x01, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x18, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe8, 0xaf, 0xa5,
	0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xd2, 0x01, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x22, 0xbe, 0x04,
	0x0a, 0x17, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0c, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x52, 0x0c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe7,
	0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0e, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe5, 0x88,
	0x86, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x34, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe6, 0xa0, 0x87,
	0xe5, 0x87, 0x86, 0xe5, 0xb7, 0xae, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a,
	0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe6, 0x9c,
	0x80, 0xe9, 0xab, 0x98, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe5, 0x88, 0x86, 0xe6, 0x95,
	0xb0, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x18, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe8, 0xaf, 0xa5, 0xe7, 0xbb,
	0xb4, 0xe5, 0xba, 0xa6, 0x52, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x2a, 0x0f, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4,
	0xba, 0xba, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0x71,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21,
	0x2a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x22, 0x84, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe7, 0xbb, 0xb4, 0xe5,
	0xba, 0xa6, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x0c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0e, 0xe8, 0xaf, 0x95, 0xe5,
	0x8d, 0xb7, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0x69, 0x64, 0xd2, 0x01, 0x0c, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x0c, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x72, 0x0a, 0x15, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe8, 0xaf, 0x95, 0xe5, 0x8d,
	0xb7, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x15, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0x69, 0x64,
	0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x75, 0x0a, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x61, 0x73, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0c, 0xe7, 0xbb, 0xb4, 0xe5, 0xba,
	0xa6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd6, 0x01,
	0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a,
	0x08, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x6a, 0x0a, 0x18, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41,
	0x2b, 0x2a, 0x0e, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0x69,
	0x64, 0xd2, 0x01, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x18, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x25,
	0x53, 0x61, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x18, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x52, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x16,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65,
	0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2a, 0x92, 0x41,
	0x27, 0x2a, 0x0c, 0xe8, 0xaf, 0x84, 0xe8, 0xaf, 0xad, 0xe9, 0x9b, 0x86, 0xe5, 0x90, 0x88, 0xd2,
	0x01, 0x16, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x16, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x28, 0x0a, 0x26, 0x53, 0x61, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x22, 0x53,
	0x61, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x71, 0x0a, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22,
	0x2a, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x52, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x0c, 0xe8, 0xaf, 0x84, 0xe8,
	0xaf, 0xad, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xd2, 0x01, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x75,
	0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x25, 0x92,
	0x41, 0x22, 0x2a, 0x15, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0,
	0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe7, 0x82, 0xb9, 0xd2, 0x01, 0x08, 0x75, 0x70, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x08, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x44,
	0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x15, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0x86, 0xe6, 0x95, 0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe7, 0x82, 0xb9, 0xd2, 0x01, 0x09,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x1e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x71, 0x0a, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x0c, 0xe8, 0xaf, 0x84, 0xe8, 0xaf, 0xad, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x70, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x15,
	0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe5, 0x8c, 0xba, 0xe5,
	0x88, 0x86, 0xe7, 0x82, 0xb9, 0x52, 0x08, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x15, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0x86, 0xe6, 0x95, 0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe7, 0x82, 0xb9, 0x52, 0x09,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe6, 0x9c, 0x80,
	0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0xba, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x18, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x52, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x29,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x16, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x61, 0x73, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65,
	0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xaf, 0x84, 0xe8,
	0xaf, 0xad, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x16, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xd3, 0x02, 0x0a, 0x26, 0x53, 0x61, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x74, 0x0a, 0x18, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35,
	0x2a, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x18, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12,
	0x65, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0c, 0xe9, 0xa2, 0x98, 0xe7, 0x9b,
	0xae, 0xe9, 0x9b, 0x86, 0xe5, 0x90, 0x88, 0xd2, 0x01, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x27, 0x53, 0x61, 0x76, 0x65, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xab, 0x03, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d,
	0x2a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0c,
	0xe9, 0xa2, 0x98, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0xd2, 0x01, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08,
	0x2a, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x80, 0x01, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x61,
	0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x22, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x3a, 0x30, 0xe5, 0x8d, 0x95, 0xe9, 0x80, 0x89, 0xe3, 0x80, 0x81, 0x31, 0xe5, 0xa4,
	0x9a, 0xe9, 0x80, 0x89, 0xe3, 0x80, 0x81, 0x32, 0xe5, 0x88, 0xa4, 0xe6, 0x96, 0xad, 0xd2, 0x01,
	0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x52, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0c, 0xe9, 0xa2, 0x98, 0xe7, 0x9b, 0xae, 0xe5,
	0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0xd2, 0x01, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x0c,
	0xe9, 0xa2, 0x98, 0xe7, 0x9b, 0xae, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xd2, 0x01, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xf8, 0x01, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x12, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52,
	0x12, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe9,
	0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xd2, 0x01, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x06, 0xe5, 0x88, 0x86, 0xe6,
	0x95, 0xb0, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0c, 0xe9,
	0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0xd2, 0x01, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xd2, 0x05, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0x92, 0x41, 0x0d, 0x2a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x0c, 0xe9, 0xa2, 0x98, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe9, 0xa2,
	0x98, 0xd2, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a,
	0x22, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x30, 0xe5, 0x8d, 0x95, 0xe9, 0x80, 0x89, 0xe3,
	0x80, 0x81, 0x31, 0xe5, 0xa4, 0x9a, 0xe9, 0x80, 0x89, 0xe3, 0x80, 0x81, 0x32, 0xe5, 0x88, 0xa4,
	0xe6, 0x96, 0xad, 0xd2, 0x01, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x52, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0c, 0xe9, 0xa2,
	0x98, 0xe7, 0x9b, 0xae, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0xd2, 0x01, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x08, 0xe8, 0xaf, 0x95, 0xe5, 0x8d, 0xb7, 0x69, 0x64, 0xd2,
	0x01, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52,
	0x0d, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x61,
	0x0a, 0x17, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0x69, 0x64, 0xd2, 0x01,
	0x17, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x17, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe6, 0x9c, 0x80, 0xe5,
	0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe4, 0xba, 0xba, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x12, 0x6d, 0x0a, 0x15, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe9, 0xa2, 0x98, 0xe7, 0x9b, 0xae, 0xe9, 0x80, 0x89, 0xe9,
	0xa1, 0xb9, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x15, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x9c, 0x03, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x12, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0xe9, 0x80, 0x89, 0xe9, 0xa1,
	0xb9, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xd2, 0x01, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x06, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0c, 0xe9, 0x80, 0x89, 0xe9, 0xa1,
	0xb9, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0xd2, 0x01, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12,
	0x34, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0xba, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x37, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x2a, 0x0c, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x79,
	0x0a, 0x29, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x2a, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe9,
	0xa2, 0x98, 0xe7, 0x9b, 0xae, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x2b, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0xd2, 0x01, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x2c,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x2a, 0x0c, 0xe9, 0xa2, 0x98, 0xe7, 0x9b, 0xae, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9,
	0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xba, 0x01, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50,
	0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0xd2, 0x01, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x29,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x2c, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a,
	0x0c, 0xe9, 0xa2, 0x98, 0xe7, 0x9b, 0xae, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x3e, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x10, 0x02, 0x42, 0x13, 0x5a, 0x11,
	0x65, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eas_api_v1_eas_sales_paper_models_proto_rawDescOnce sync.Once
	file_eas_api_v1_eas_sales_paper_models_proto_rawDescData = file_eas_api_v1_eas_sales_paper_models_proto_rawDesc
)

func file_eas_api_v1_eas_sales_paper_models_proto_rawDescGZIP() []byte {
	file_eas_api_v1_eas_sales_paper_models_proto_rawDescOnce.Do(func() {
		file_eas_api_v1_eas_sales_paper_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_eas_api_v1_eas_sales_paper_models_proto_rawDescData)
	})
	return file_eas_api_v1_eas_sales_paper_models_proto_rawDescData
}

var file_eas_api_v1_eas_sales_paper_models_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eas_api_v1_eas_sales_paper_models_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_eas_api_v1_eas_sales_paper_models_proto_goTypes = []interface{}{
	(QuestionType)(0),                                     // 0: eas_api.v1.QuestionType
	(*CreateSalesPaperRequest)(nil),                       // 1: eas_api.v1.CreateSalesPaperRequest
	(*CreateSalesPaperResponse)(nil),                      // 2: eas_api.v1.CreateSalesPaperResponse
	(*SalesPaperData)(nil),                                // 3: eas_api.v1.SalesPaperData
	(*GetSalesPaperPageListRequest)(nil),                  // 4: eas_api.v1.GetSalesPaperPageListRequest
	(*GetSalesPaperPageListResponse)(nil),                 // 5: eas_api.v1.GetSalesPaperPageListResponse
	(*GetUsableSalesPaperPageListRequest)(nil),            // 6: eas_api.v1.GetUsableSalesPaperPageListRequest
	(*GetUsableSalesPaperPageListResponse)(nil),           // 7: eas_api.v1.GetUsableSalesPaperPageListResponse
	(*GetSalesPaperDetailRequest)(nil),                    // 8: eas_api.v1.GetSalesPaperDetailRequest
	(*GetSalesPaperDetailResponse)(nil),                   // 9: eas_api.v1.GetSalesPaperDetailResponse
	(*SetSalesPaperStatusRequest)(nil),                    // 10: eas_api.v1.SetSalesPaperStatusRequest
	(*SetSalesPaperStatusResponse)(nil),                   // 11: eas_api.v1.SetSalesPaperStatusResponse
	(*UpdateSalesPaperRequest)(nil),                       // 12: eas_api.v1.UpdateSalesPaperRequest
	(*UpdateSalesPaperResponse)(nil),                      // 13: eas_api.v1.UpdateSalesPaperResponse
	(*DeleteSalesPaperRequest)(nil),                       // 14: eas_api.v1.DeleteSalesPaperRequest
	(*DeleteSalesPaperResponse)(nil),                      // 15: eas_api.v1.DeleteSalesPaperResponse
	(*SaveSalesPaperCommentRequest)(nil),                  // 16: eas_api.v1.SaveSalesPaperCommentRequest
	(*SaveSalesPaperCommentResponse)(nil),                 // 17: eas_api.v1.SaveSalesPaperCommentResponse
	(*SaveSalesPaperCommentData)(nil),                     // 18: eas_api.v1.SaveSalesPaperCommentData
	(*SalesPaperCommentData)(nil),                         // 19: eas_api.v1.SalesPaperCommentData
	(*GetSalesPaperCommentListRequest)(nil),               // 20: eas_api.v1.GetSalesPaperCommentListRequest
	(*GetSalesPaperCommentListResponse)(nil),              // 21: eas_api.v1.GetSalesPaperCommentListResponse
	(*CreateSalesPaperDimensionRequest)(nil),              // 22: eas_api.v1.CreateSalesPaperDimensionRequest
	(*CreateSalesPaperDimensionResponse)(nil),             // 23: eas_api.v1.CreateSalesPaperDimensionResponse
	(*CreateSalesPaperDimensionData)(nil),                 // 24: eas_api.v1.CreateSalesPaperDimensionData
	(*SalesPaperDimensionData)(nil),                       // 25: eas_api.v1.SalesPaperDimensionData
	(*GetSalesPaperDimensionListRequest)(nil),             // 26: eas_api.v1.GetSalesPaperDimensionListRequest
	(*GetSalesPaperDimensionListResponse)(nil),            // 27: eas_api.v1.GetSalesPaperDimensionListResponse
	(*GetSalesPaperDimensionDetailRequest)(nil),           // 28: eas_api.v1.GetSalesPaperDimensionDetailRequest
	(*GetSalesPaperDimensionDetailResponse)(nil),          // 29: eas_api.v1.GetSalesPaperDimensionDetailResponse
	(*UpdateSalesPaperDimensionRequest)(nil),              // 30: eas_api.v1.UpdateSalesPaperDimensionRequest
	(*UpdateSalesPaperDimensionResponse)(nil),             // 31: eas_api.v1.UpdateSalesPaperDimensionResponse
	(*DeleteSalesPaperDimensionRequest)(nil),              // 32: eas_api.v1.DeleteSalesPaperDimensionRequest
	(*DeleteSalesPaperDimensionResponse)(nil),             // 33: eas_api.v1.DeleteSalesPaperDimensionResponse
	(*SaveSalesPaperDimensionCommentRequest)(nil),         // 34: eas_api.v1.SaveSalesPaperDimensionCommentRequest
	(*SaveSalesPaperDimensionCommentResponse)(nil),        // 35: eas_api.v1.SaveSalesPaperDimensionCommentResponse
	(*SaveSalesPaperDimensionCommentData)(nil),            // 36: eas_api.v1.SaveSalesPaperDimensionCommentData
	(*SalesPaperDimensionCommentData)(nil),                // 37: eas_api.v1.SalesPaperDimensionCommentData
	(*GetSalesPaperDimensionCommentListRequest)(nil),      // 38: eas_api.v1.GetSalesPaperDimensionCommentListRequest
	(*GetSalesPaperDimensionCommentListResponse)(nil),     // 39: eas_api.v1.GetSalesPaperDimensionCommentListResponse
	(*SaveSalesPaperDimensionQuestionRequest)(nil),        // 40: eas_api.v1.SaveSalesPaperDimensionQuestionRequest
	(*SaveSalesPaperDimensionQuestionResponse)(nil),       // 41: eas_api.v1.SaveSalesPaperDimensionQuestionResponse
	(*SaveQuestionData)(nil),                              // 42: eas_api.v1.SaveQuestionData
	(*SaveQuestionOptionData)(nil),                        // 43: eas_api.v1.SaveQuestionOptionData
	(*QuestionData)(nil),                                  // 44: eas_api.v1.QuestionData
	(*QuestionOptionData)(nil),                            // 45: eas_api.v1.QuestionOptionData
	(*GetSalesPaperDimensionQuestionListRequest)(nil),     // 46: eas_api.v1.GetSalesPaperDimensionQuestionListRequest
	(*GetSalesPaperDimensionQuestionListResponse)(nil),    // 47: eas_api.v1.GetSalesPaperDimensionQuestionListResponse
	(*GetSalesPaperDimensionQuestionDetailRequest)(nil),   // 48: eas_api.v1.GetSalesPaperDimensionQuestionDetailRequest
	(*GetSalesPaperDimensionQuestionDetailResponse)(nil),  // 49: eas_api.v1.GetSalesPaperDimensionQuestionDetailResponse
	(*DeleteSalesPaperDimensionQuestionRequest)(nil),      // 50: eas_api.v1.DeleteSalesPaperDimensionQuestionRequest
	(*DeleteSalesPaperDimensionQuestionResponse)(nil),     // 51: eas_api.v1.DeleteSalesPaperDimensionQuestionResponse
	(*GetSalesPaperDimensionQuestionPreViewRequest)(nil),  // 52: eas_api.v1.GetSalesPaperDimensionQuestionPreViewRequest
	(*GetSalesPaperDimensionQuestionPreViewResponse)(nil), // 53: eas_api.v1.GetSalesPaperDimensionQuestionPreViewResponse
	(SalesPaperStatus)(0),                                 // 54: eas_api.v1.SalesPaperStatus
}
var file_eas_api_v1_eas_sales_paper_models_proto_depIdxs = []int32{
	3,  // 0: eas_api.v1.GetSalesPaperPageListResponse.sales_paper_list:type_name -> eas_api.v1.SalesPaperData
	3,  // 1: eas_api.v1.GetUsableSalesPaperPageListResponse.sales_paper_list:type_name -> eas_api.v1.SalesPaperData
	3,  // 2: eas_api.v1.GetSalesPaperDetailResponse.sales_paper:type_name -> eas_api.v1.SalesPaperData
	54, // 3: eas_api.v1.SetSalesPaperStatusRequest.sales_paper_status:type_name -> eas_api.v1.SalesPaperStatus
	18, // 4: eas_api.v1.SaveSalesPaperCommentRequest.comment_data:type_name -> eas_api.v1.SaveSalesPaperCommentData
	19, // 5: eas_api.v1.GetSalesPaperCommentListResponse.comment_data:type_name -> eas_api.v1.SalesPaperCommentData
	24, // 6: eas_api.v1.CreateSalesPaperDimensionRequest.dimension_data:type_name -> eas_api.v1.CreateSalesPaperDimensionData
	25, // 7: eas_api.v1.GetSalesPaperDimensionListResponse.dimension_data:type_name -> eas_api.v1.SalesPaperDimensionData
	25, // 8: eas_api.v1.GetSalesPaperDimensionDetailResponse.sales_paper_dimension:type_name -> eas_api.v1.SalesPaperDimensionData
	24, // 9: eas_api.v1.UpdateSalesPaperDimensionRequest.dimension_data:type_name -> eas_api.v1.CreateSalesPaperDimensionData
	36, // 10: eas_api.v1.SaveSalesPaperDimensionCommentRequest.dimension_comment_data:type_name -> eas_api.v1.SaveSalesPaperDimensionCommentData
	37, // 11: eas_api.v1.GetSalesPaperDimensionCommentListResponse.dimension_comment_data:type_name -> eas_api.v1.SalesPaperDimensionCommentData
	42, // 12: eas_api.v1.SaveSalesPaperDimensionQuestionRequest.question_data:type_name -> eas_api.v1.SaveQuestionData
	0,  // 13: eas_api.v1.SaveQuestionData.question_type_id:type_name -> eas_api.v1.QuestionType
	43, // 14: eas_api.v1.SaveQuestionData.options:type_name -> eas_api.v1.SaveQuestionOptionData
	0,  // 15: eas_api.v1.QuestionData.question_type_id:type_name -> eas_api.v1.QuestionType
	45, // 16: eas_api.v1.QuestionData.question_options_data:type_name -> eas_api.v1.QuestionOptionData
	44, // 17: eas_api.v1.GetSalesPaperDimensionQuestionListResponse.question_data:type_name -> eas_api.v1.QuestionData
	44, // 18: eas_api.v1.GetSalesPaperDimensionQuestionDetailResponse.question_data:type_name -> eas_api.v1.QuestionData
	44, // 19: eas_api.v1.GetSalesPaperDimensionQuestionPreViewResponse.question_data:type_name -> eas_api.v1.QuestionData
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_eas_api_v1_eas_sales_paper_models_proto_init() }
func file_eas_api_v1_eas_sales_paper_models_proto_init() {
	if File_eas_api_v1_eas_sales_paper_models_proto != nil {
		return
	}
	file_eas_api_v1_eas_models_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesPaperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesPaperResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPaperData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperPageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperPageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsableSalesPaperPageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsableSalesPaperPageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSalesPaperStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSalesPaperStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSalesPaperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSalesPaperResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSalesPaperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSalesPaperResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSalesPaperCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSalesPaperCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSalesPaperCommentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPaperCommentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperCommentListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperCommentListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesPaperDimensionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesPaperDimensionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesPaperDimensionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPaperDimensionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSalesPaperDimensionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSalesPaperDimensionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSalesPaperDimensionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSalesPaperDimensionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSalesPaperDimensionCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSalesPaperDimensionCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSalesPaperDimensionCommentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPaperDimensionCommentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionCommentListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionCommentListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSalesPaperDimensionQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSalesPaperDimensionQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveQuestionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveQuestionOptionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionOptionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionQuestionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionQuestionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionQuestionDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionQuestionDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSalesPaperDimensionQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSalesPaperDimensionQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionQuestionPreViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eas_api_v1_eas_sales_paper_models_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaperDimensionQuestionPreViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eas_api_v1_eas_sales_paper_models_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eas_api_v1_eas_sales_paper_models_proto_goTypes,
		DependencyIndexes: file_eas_api_v1_eas_sales_paper_models_proto_depIdxs,
		EnumInfos:         file_eas_api_v1_eas_sales_paper_models_proto_enumTypes,
		MessageInfos:      file_eas_api_v1_eas_sales_paper_models_proto_msgTypes,
	}.Build()
	File_eas_api_v1_eas_sales_paper_models_proto = out.File
	file_eas_api_v1_eas_sales_paper_models_proto_rawDesc = nil
	file_eas_api_v1_eas_sales_paper_models_proto_goTypes = nil
	file_eas_api_v1_eas_sales_paper_models_proto_depIdxs = nil
}
