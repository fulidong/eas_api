// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: eas_api/v1/eas_sales_paper.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EasSalesPaperServiceClient is the client API for EasSalesPaperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EasSalesPaperServiceClient interface {
	// ===============================试卷模块=========================================
	// 创建试卷
	CreateSalesPaper(ctx context.Context, in *CreateSalesPaperRequest, opts ...grpc.CallOption) (*CreateSalesPaperResponse, error)
	// 试卷列表
	GetSalesPaperPageList(ctx context.Context, in *GetSalesPaperPageListRequest, opts ...grpc.CallOption) (*GetSalesPaperPageListResponse, error)
	// 可用试卷列表
	GetUsableSalesPaperPageList(ctx context.Context, in *GetUsableSalesPaperPageListRequest, opts ...grpc.CallOption) (*GetUsableSalesPaperPageListResponse, error)
	// 试卷详情
	GetSalesPaperDetail(ctx context.Context, in *GetSalesPaperDetailRequest, opts ...grpc.CallOption) (*GetSalesPaperDetailResponse, error)
	// 修改试卷信息
	UpdateSalesPaper(ctx context.Context, in *UpdateSalesPaperRequest, opts ...grpc.CallOption) (*UpdateSalesPaperResponse, error)
	// 禁用/启用试卷
	SetSalesPaperStatus(ctx context.Context, in *SetSalesPaperStatusRequest, opts ...grpc.CallOption) (*SetSalesPaperStatusResponse, error)
	// 删除试卷
	DeleteSalesPaper(ctx context.Context, in *DeleteSalesPaperRequest, opts ...grpc.CallOption) (*DeleteSalesPaperResponse, error)
	// ===============================试卷评语模块=========================================
	// 保存试卷评语
	SaveSalesPaperComment(ctx context.Context, in *SaveSalesPaperCommentRequest, opts ...grpc.CallOption) (*SaveSalesPaperCommentResponse, error)
	// 试卷评语列表
	GetSalesPaperCommentList(ctx context.Context, in *GetSalesPaperCommentListRequest, opts ...grpc.CallOption) (*GetSalesPaperCommentListResponse, error)
	// ===============================试卷维度模块=========================================
	// 创建试卷维度
	CreateSalesPaperDimension(ctx context.Context, in *CreateSalesPaperDimensionRequest, opts ...grpc.CallOption) (*CreateSalesPaperDimensionResponse, error)
	// 试卷维度列表
	GetSalesPaperDimensionPageList(ctx context.Context, in *GetSalesPaperDimensionPageListRequest, opts ...grpc.CallOption) (*GetSalesPaperDimensionPageListResponse, error)
	// 试卷维度详情
	GetSalesPaperDimensionDetail(ctx context.Context, in *GetSalesPaperDimensionDetailRequest, opts ...grpc.CallOption) (*GetSalesPaperDimensionDetailResponse, error)
	// 修改试卷维度信息
	UpdateSalesPaperDimension(ctx context.Context, in *UpdateSalesPaperDimensionRequest, opts ...grpc.CallOption) (*UpdateSalesPaperDimensionResponse, error)
	// 删除试卷维度
	DeleteSalesPaperDimension(ctx context.Context, in *DeleteSalesPaperDimensionRequest, opts ...grpc.CallOption) (*DeleteSalesPaperDimensionResponse, error)
}

type easSalesPaperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEasSalesPaperServiceClient(cc grpc.ClientConnInterface) EasSalesPaperServiceClient {
	return &easSalesPaperServiceClient{cc}
}

func (c *easSalesPaperServiceClient) CreateSalesPaper(ctx context.Context, in *CreateSalesPaperRequest, opts ...grpc.CallOption) (*CreateSalesPaperResponse, error) {
	out := new(CreateSalesPaperResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/CreateSalesPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) GetSalesPaperPageList(ctx context.Context, in *GetSalesPaperPageListRequest, opts ...grpc.CallOption) (*GetSalesPaperPageListResponse, error) {
	out := new(GetSalesPaperPageListResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/GetSalesPaperPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) GetUsableSalesPaperPageList(ctx context.Context, in *GetUsableSalesPaperPageListRequest, opts ...grpc.CallOption) (*GetUsableSalesPaperPageListResponse, error) {
	out := new(GetUsableSalesPaperPageListResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/GetUsableSalesPaperPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) GetSalesPaperDetail(ctx context.Context, in *GetSalesPaperDetailRequest, opts ...grpc.CallOption) (*GetSalesPaperDetailResponse, error) {
	out := new(GetSalesPaperDetailResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/GetSalesPaperDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) UpdateSalesPaper(ctx context.Context, in *UpdateSalesPaperRequest, opts ...grpc.CallOption) (*UpdateSalesPaperResponse, error) {
	out := new(UpdateSalesPaperResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/UpdateSalesPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) SetSalesPaperStatus(ctx context.Context, in *SetSalesPaperStatusRequest, opts ...grpc.CallOption) (*SetSalesPaperStatusResponse, error) {
	out := new(SetSalesPaperStatusResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/SetSalesPaperStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) DeleteSalesPaper(ctx context.Context, in *DeleteSalesPaperRequest, opts ...grpc.CallOption) (*DeleteSalesPaperResponse, error) {
	out := new(DeleteSalesPaperResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/DeleteSalesPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) SaveSalesPaperComment(ctx context.Context, in *SaveSalesPaperCommentRequest, opts ...grpc.CallOption) (*SaveSalesPaperCommentResponse, error) {
	out := new(SaveSalesPaperCommentResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/SaveSalesPaperComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) GetSalesPaperCommentList(ctx context.Context, in *GetSalesPaperCommentListRequest, opts ...grpc.CallOption) (*GetSalesPaperCommentListResponse, error) {
	out := new(GetSalesPaperCommentListResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/GetSalesPaperCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) CreateSalesPaperDimension(ctx context.Context, in *CreateSalesPaperDimensionRequest, opts ...grpc.CallOption) (*CreateSalesPaperDimensionResponse, error) {
	out := new(CreateSalesPaperDimensionResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/CreateSalesPaperDimension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) GetSalesPaperDimensionPageList(ctx context.Context, in *GetSalesPaperDimensionPageListRequest, opts ...grpc.CallOption) (*GetSalesPaperDimensionPageListResponse, error) {
	out := new(GetSalesPaperDimensionPageListResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/GetSalesPaperDimensionPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) GetSalesPaperDimensionDetail(ctx context.Context, in *GetSalesPaperDimensionDetailRequest, opts ...grpc.CallOption) (*GetSalesPaperDimensionDetailResponse, error) {
	out := new(GetSalesPaperDimensionDetailResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/GetSalesPaperDimensionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) UpdateSalesPaperDimension(ctx context.Context, in *UpdateSalesPaperDimensionRequest, opts ...grpc.CallOption) (*UpdateSalesPaperDimensionResponse, error) {
	out := new(UpdateSalesPaperDimensionResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/UpdateSalesPaperDimension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easSalesPaperServiceClient) DeleteSalesPaperDimension(ctx context.Context, in *DeleteSalesPaperDimensionRequest, opts ...grpc.CallOption) (*DeleteSalesPaperDimensionResponse, error) {
	out := new(DeleteSalesPaperDimensionResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasSalesPaperService/DeleteSalesPaperDimension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EasSalesPaperServiceServer is the server API for EasSalesPaperService service.
// All implementations must embed UnimplementedEasSalesPaperServiceServer
// for forward compatibility
type EasSalesPaperServiceServer interface {
	// ===============================试卷模块=========================================
	// 创建试卷
	CreateSalesPaper(context.Context, *CreateSalesPaperRequest) (*CreateSalesPaperResponse, error)
	// 试卷列表
	GetSalesPaperPageList(context.Context, *GetSalesPaperPageListRequest) (*GetSalesPaperPageListResponse, error)
	// 可用试卷列表
	GetUsableSalesPaperPageList(context.Context, *GetUsableSalesPaperPageListRequest) (*GetUsableSalesPaperPageListResponse, error)
	// 试卷详情
	GetSalesPaperDetail(context.Context, *GetSalesPaperDetailRequest) (*GetSalesPaperDetailResponse, error)
	// 修改试卷信息
	UpdateSalesPaper(context.Context, *UpdateSalesPaperRequest) (*UpdateSalesPaperResponse, error)
	// 禁用/启用试卷
	SetSalesPaperStatus(context.Context, *SetSalesPaperStatusRequest) (*SetSalesPaperStatusResponse, error)
	// 删除试卷
	DeleteSalesPaper(context.Context, *DeleteSalesPaperRequest) (*DeleteSalesPaperResponse, error)
	// ===============================试卷评语模块=========================================
	// 保存试卷评语
	SaveSalesPaperComment(context.Context, *SaveSalesPaperCommentRequest) (*SaveSalesPaperCommentResponse, error)
	// 试卷评语列表
	GetSalesPaperCommentList(context.Context, *GetSalesPaperCommentListRequest) (*GetSalesPaperCommentListResponse, error)
	// ===============================试卷维度模块=========================================
	// 创建试卷维度
	CreateSalesPaperDimension(context.Context, *CreateSalesPaperDimensionRequest) (*CreateSalesPaperDimensionResponse, error)
	// 试卷维度列表
	GetSalesPaperDimensionPageList(context.Context, *GetSalesPaperDimensionPageListRequest) (*GetSalesPaperDimensionPageListResponse, error)
	// 试卷维度详情
	GetSalesPaperDimensionDetail(context.Context, *GetSalesPaperDimensionDetailRequest) (*GetSalesPaperDimensionDetailResponse, error)
	// 修改试卷维度信息
	UpdateSalesPaperDimension(context.Context, *UpdateSalesPaperDimensionRequest) (*UpdateSalesPaperDimensionResponse, error)
	// 删除试卷维度
	DeleteSalesPaperDimension(context.Context, *DeleteSalesPaperDimensionRequest) (*DeleteSalesPaperDimensionResponse, error)
	mustEmbedUnimplementedEasSalesPaperServiceServer()
}

// UnimplementedEasSalesPaperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEasSalesPaperServiceServer struct {
}

func (UnimplementedEasSalesPaperServiceServer) CreateSalesPaper(context.Context, *CreateSalesPaperRequest) (*CreateSalesPaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSalesPaper not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) GetSalesPaperPageList(context.Context, *GetSalesPaperPageListRequest) (*GetSalesPaperPageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesPaperPageList not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) GetUsableSalesPaperPageList(context.Context, *GetUsableSalesPaperPageListRequest) (*GetUsableSalesPaperPageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsableSalesPaperPageList not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) GetSalesPaperDetail(context.Context, *GetSalesPaperDetailRequest) (*GetSalesPaperDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesPaperDetail not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) UpdateSalesPaper(context.Context, *UpdateSalesPaperRequest) (*UpdateSalesPaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSalesPaper not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) SetSalesPaperStatus(context.Context, *SetSalesPaperStatusRequest) (*SetSalesPaperStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSalesPaperStatus not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) DeleteSalesPaper(context.Context, *DeleteSalesPaperRequest) (*DeleteSalesPaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSalesPaper not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) SaveSalesPaperComment(context.Context, *SaveSalesPaperCommentRequest) (*SaveSalesPaperCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSalesPaperComment not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) GetSalesPaperCommentList(context.Context, *GetSalesPaperCommentListRequest) (*GetSalesPaperCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesPaperCommentList not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) CreateSalesPaperDimension(context.Context, *CreateSalesPaperDimensionRequest) (*CreateSalesPaperDimensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSalesPaperDimension not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) GetSalesPaperDimensionPageList(context.Context, *GetSalesPaperDimensionPageListRequest) (*GetSalesPaperDimensionPageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesPaperDimensionPageList not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) GetSalesPaperDimensionDetail(context.Context, *GetSalesPaperDimensionDetailRequest) (*GetSalesPaperDimensionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesPaperDimensionDetail not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) UpdateSalesPaperDimension(context.Context, *UpdateSalesPaperDimensionRequest) (*UpdateSalesPaperDimensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSalesPaperDimension not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) DeleteSalesPaperDimension(context.Context, *DeleteSalesPaperDimensionRequest) (*DeleteSalesPaperDimensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSalesPaperDimension not implemented")
}
func (UnimplementedEasSalesPaperServiceServer) mustEmbedUnimplementedEasSalesPaperServiceServer() {}

// UnsafeEasSalesPaperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EasSalesPaperServiceServer will
// result in compilation errors.
type UnsafeEasSalesPaperServiceServer interface {
	mustEmbedUnimplementedEasSalesPaperServiceServer()
}

func RegisterEasSalesPaperServiceServer(s grpc.ServiceRegistrar, srv EasSalesPaperServiceServer) {
	s.RegisterService(&EasSalesPaperService_ServiceDesc, srv)
}

func _EasSalesPaperService_CreateSalesPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSalesPaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).CreateSalesPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/CreateSalesPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).CreateSalesPaper(ctx, req.(*CreateSalesPaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_GetSalesPaperPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesPaperPageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).GetSalesPaperPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/GetSalesPaperPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).GetSalesPaperPageList(ctx, req.(*GetSalesPaperPageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_GetUsableSalesPaperPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsableSalesPaperPageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).GetUsableSalesPaperPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/GetUsableSalesPaperPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).GetUsableSalesPaperPageList(ctx, req.(*GetUsableSalesPaperPageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_GetSalesPaperDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesPaperDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).GetSalesPaperDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/GetSalesPaperDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).GetSalesPaperDetail(ctx, req.(*GetSalesPaperDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_UpdateSalesPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSalesPaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).UpdateSalesPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/UpdateSalesPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).UpdateSalesPaper(ctx, req.(*UpdateSalesPaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_SetSalesPaperStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSalesPaperStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).SetSalesPaperStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/SetSalesPaperStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).SetSalesPaperStatus(ctx, req.(*SetSalesPaperStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_DeleteSalesPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSalesPaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).DeleteSalesPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/DeleteSalesPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).DeleteSalesPaper(ctx, req.(*DeleteSalesPaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_SaveSalesPaperComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSalesPaperCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).SaveSalesPaperComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/SaveSalesPaperComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).SaveSalesPaperComment(ctx, req.(*SaveSalesPaperCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_GetSalesPaperCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesPaperCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).GetSalesPaperCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/GetSalesPaperCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).GetSalesPaperCommentList(ctx, req.(*GetSalesPaperCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_CreateSalesPaperDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSalesPaperDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).CreateSalesPaperDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/CreateSalesPaperDimension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).CreateSalesPaperDimension(ctx, req.(*CreateSalesPaperDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_GetSalesPaperDimensionPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesPaperDimensionPageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).GetSalesPaperDimensionPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/GetSalesPaperDimensionPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).GetSalesPaperDimensionPageList(ctx, req.(*GetSalesPaperDimensionPageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_GetSalesPaperDimensionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesPaperDimensionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).GetSalesPaperDimensionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/GetSalesPaperDimensionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).GetSalesPaperDimensionDetail(ctx, req.(*GetSalesPaperDimensionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_UpdateSalesPaperDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSalesPaperDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).UpdateSalesPaperDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/UpdateSalesPaperDimension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).UpdateSalesPaperDimension(ctx, req.(*UpdateSalesPaperDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasSalesPaperService_DeleteSalesPaperDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSalesPaperDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasSalesPaperServiceServer).DeleteSalesPaperDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasSalesPaperService/DeleteSalesPaperDimension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasSalesPaperServiceServer).DeleteSalesPaperDimension(ctx, req.(*DeleteSalesPaperDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EasSalesPaperService_ServiceDesc is the grpc.ServiceDesc for EasSalesPaperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EasSalesPaperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eas_api.v1.EasSalesPaperService",
	HandlerType: (*EasSalesPaperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSalesPaper",
			Handler:    _EasSalesPaperService_CreateSalesPaper_Handler,
		},
		{
			MethodName: "GetSalesPaperPageList",
			Handler:    _EasSalesPaperService_GetSalesPaperPageList_Handler,
		},
		{
			MethodName: "GetUsableSalesPaperPageList",
			Handler:    _EasSalesPaperService_GetUsableSalesPaperPageList_Handler,
		},
		{
			MethodName: "GetSalesPaperDetail",
			Handler:    _EasSalesPaperService_GetSalesPaperDetail_Handler,
		},
		{
			MethodName: "UpdateSalesPaper",
			Handler:    _EasSalesPaperService_UpdateSalesPaper_Handler,
		},
		{
			MethodName: "SetSalesPaperStatus",
			Handler:    _EasSalesPaperService_SetSalesPaperStatus_Handler,
		},
		{
			MethodName: "DeleteSalesPaper",
			Handler:    _EasSalesPaperService_DeleteSalesPaper_Handler,
		},
		{
			MethodName: "SaveSalesPaperComment",
			Handler:    _EasSalesPaperService_SaveSalesPaperComment_Handler,
		},
		{
			MethodName: "GetSalesPaperCommentList",
			Handler:    _EasSalesPaperService_GetSalesPaperCommentList_Handler,
		},
		{
			MethodName: "CreateSalesPaperDimension",
			Handler:    _EasSalesPaperService_CreateSalesPaperDimension_Handler,
		},
		{
			MethodName: "GetSalesPaperDimensionPageList",
			Handler:    _EasSalesPaperService_GetSalesPaperDimensionPageList_Handler,
		},
		{
			MethodName: "GetSalesPaperDimensionDetail",
			Handler:    _EasSalesPaperService_GetSalesPaperDimensionDetail_Handler,
		},
		{
			MethodName: "UpdateSalesPaperDimension",
			Handler:    _EasSalesPaperService_UpdateSalesPaperDimension_Handler,
		},
		{
			MethodName: "DeleteSalesPaperDimension",
			Handler:    _EasSalesPaperService_DeleteSalesPaperDimension_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eas_api/v1/eas_sales_paper.proto",
}
