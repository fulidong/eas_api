// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: eas_api/v1/eas.proto

package v1

import (
	context "context"
	common "eas_api/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EasServiceClient is the client API for EasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EasServiceClient interface {
	Healthy(ctx context.Context, in *common.EmptyRequest, opts ...grpc.CallOption) (*common.HealthyReply, error)
	// 登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// ===============================用户模块=========================================
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// 用户列表
	GetPageList(ctx context.Context, in *GetPageListRequest, opts ...grpc.CallOption) (*GetPageListResponse, error)
	// 用户详情
	GetUserDetail(ctx context.Context, in *GetUserDetailRequest, opts ...grpc.CallOption) (*GetUserDetailResponse, error)
	// 查询用户个人信息
	GetUserSelfDetail(ctx context.Context, in *GetUserSelfDetailRequest, opts ...grpc.CallOption) (*GetUserSelfDetailResponse, error)
	// 禁用/启用用户
	SetUserStatus(ctx context.Context, in *SetUserStatusRequest, opts ...grpc.CallOption) (*SetUserStatusResponse, error)
	// 修改用户信息
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// 修改用户个人信息
	UpdateUserSelf(ctx context.Context, in *UpdateUserSelfRequest, opts ...grpc.CallOption) (*UpdateUserSelfResponse, error)
	// 重置用户密码
	ResetUserPassWord(ctx context.Context, in *ResetUserPassWordRequest, opts ...grpc.CallOption) (*ResetUserPassWordResponse, error)
	// 修改密码
	UpdateUserPassWord(ctx context.Context, in *UpdateUserPassWordRequest, opts ...grpc.CallOption) (*UpdateUserPassWordResponse, error)
	// 删除
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
}

type easServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEasServiceClient(cc grpc.ClientConnInterface) EasServiceClient {
	return &easServiceClient{cc}
}

func (c *easServiceClient) Healthy(ctx context.Context, in *common.EmptyRequest, opts ...grpc.CallOption) (*common.HealthyReply, error) {
	out := new(common.HealthyReply)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/Healthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) GetPageList(ctx context.Context, in *GetPageListRequest, opts ...grpc.CallOption) (*GetPageListResponse, error) {
	out := new(GetPageListResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/GetPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) GetUserDetail(ctx context.Context, in *GetUserDetailRequest, opts ...grpc.CallOption) (*GetUserDetailResponse, error) {
	out := new(GetUserDetailResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/GetUserDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) GetUserSelfDetail(ctx context.Context, in *GetUserSelfDetailRequest, opts ...grpc.CallOption) (*GetUserSelfDetailResponse, error) {
	out := new(GetUserSelfDetailResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/GetUserSelfDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) SetUserStatus(ctx context.Context, in *SetUserStatusRequest, opts ...grpc.CallOption) (*SetUserStatusResponse, error) {
	out := new(SetUserStatusResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/SetUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) UpdateUserSelf(ctx context.Context, in *UpdateUserSelfRequest, opts ...grpc.CallOption) (*UpdateUserSelfResponse, error) {
	out := new(UpdateUserSelfResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/UpdateUserSelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) ResetUserPassWord(ctx context.Context, in *ResetUserPassWordRequest, opts ...grpc.CallOption) (*ResetUserPassWordResponse, error) {
	out := new(ResetUserPassWordResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/ResetUserPassWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) UpdateUserPassWord(ctx context.Context, in *UpdateUserPassWordRequest, opts ...grpc.CallOption) (*UpdateUserPassWordResponse, error) {
	out := new(UpdateUserPassWordResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/UpdateUserPassWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/eas_api.v1.EasService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EasServiceServer is the server API for EasService service.
// All implementations must embed UnimplementedEasServiceServer
// for forward compatibility
type EasServiceServer interface {
	Healthy(context.Context, *common.EmptyRequest) (*common.HealthyReply, error)
	// 登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// ===============================用户模块=========================================
	// 创建用户
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// 用户列表
	GetPageList(context.Context, *GetPageListRequest) (*GetPageListResponse, error)
	// 用户详情
	GetUserDetail(context.Context, *GetUserDetailRequest) (*GetUserDetailResponse, error)
	// 查询用户个人信息
	GetUserSelfDetail(context.Context, *GetUserSelfDetailRequest) (*GetUserSelfDetailResponse, error)
	// 禁用/启用用户
	SetUserStatus(context.Context, *SetUserStatusRequest) (*SetUserStatusResponse, error)
	// 修改用户信息
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// 修改用户个人信息
	UpdateUserSelf(context.Context, *UpdateUserSelfRequest) (*UpdateUserSelfResponse, error)
	// 重置用户密码
	ResetUserPassWord(context.Context, *ResetUserPassWordRequest) (*ResetUserPassWordResponse, error)
	// 修改密码
	UpdateUserPassWord(context.Context, *UpdateUserPassWordRequest) (*UpdateUserPassWordResponse, error)
	// 删除
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	mustEmbedUnimplementedEasServiceServer()
}

// UnimplementedEasServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEasServiceServer struct {
}

func (UnimplementedEasServiceServer) Healthy(context.Context, *common.EmptyRequest) (*common.HealthyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthy not implemented")
}
func (UnimplementedEasServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedEasServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedEasServiceServer) GetPageList(context.Context, *GetPageListRequest) (*GetPageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageList not implemented")
}
func (UnimplementedEasServiceServer) GetUserDetail(context.Context, *GetUserDetailRequest) (*GetUserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetail not implemented")
}
func (UnimplementedEasServiceServer) GetUserSelfDetail(context.Context, *GetUserSelfDetailRequest) (*GetUserSelfDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSelfDetail not implemented")
}
func (UnimplementedEasServiceServer) SetUserStatus(context.Context, *SetUserStatusRequest) (*SetUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserStatus not implemented")
}
func (UnimplementedEasServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedEasServiceServer) UpdateUserSelf(context.Context, *UpdateUserSelfRequest) (*UpdateUserSelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSelf not implemented")
}
func (UnimplementedEasServiceServer) ResetUserPassWord(context.Context, *ResetUserPassWordRequest) (*ResetUserPassWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPassWord not implemented")
}
func (UnimplementedEasServiceServer) UpdateUserPassWord(context.Context, *UpdateUserPassWordRequest) (*UpdateUserPassWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassWord not implemented")
}
func (UnimplementedEasServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedEasServiceServer) mustEmbedUnimplementedEasServiceServer() {}

// UnsafeEasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EasServiceServer will
// result in compilation errors.
type UnsafeEasServiceServer interface {
	mustEmbedUnimplementedEasServiceServer()
}

func RegisterEasServiceServer(s grpc.ServiceRegistrar, srv EasServiceServer) {
	s.RegisterService(&EasService_ServiceDesc, srv)
}

func _EasService_Healthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).Healthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/Healthy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).Healthy(ctx, req.(*common.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_GetPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).GetPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/GetPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).GetPageList(ctx, req.(*GetPageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_GetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).GetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/GetUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).GetUserDetail(ctx, req.(*GetUserDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_GetUserSelfDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSelfDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).GetUserSelfDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/GetUserSelfDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).GetUserSelfDetail(ctx, req.(*GetUserSelfDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_SetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).SetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/SetUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).SetUserStatus(ctx, req.(*SetUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_UpdateUserSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).UpdateUserSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/UpdateUserSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).UpdateUserSelf(ctx, req.(*UpdateUserSelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_ResetUserPassWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPassWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).ResetUserPassWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/ResetUserPassWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).ResetUserPassWord(ctx, req.(*ResetUserPassWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_UpdateUserPassWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPassWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).UpdateUserPassWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/UpdateUserPassWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).UpdateUserPassWord(ctx, req.(*UpdateUserPassWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eas_api.v1.EasService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EasService_ServiceDesc is the grpc.ServiceDesc for EasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eas_api.v1.EasService",
	HandlerType: (*EasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthy",
			Handler:    _EasService_Healthy_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _EasService_Login_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _EasService_CreateUser_Handler,
		},
		{
			MethodName: "GetPageList",
			Handler:    _EasService_GetPageList_Handler,
		},
		{
			MethodName: "GetUserDetail",
			Handler:    _EasService_GetUserDetail_Handler,
		},
		{
			MethodName: "GetUserSelfDetail",
			Handler:    _EasService_GetUserSelfDetail_Handler,
		},
		{
			MethodName: "SetUserStatus",
			Handler:    _EasService_SetUserStatus_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _EasService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserSelf",
			Handler:    _EasService_UpdateUserSelf_Handler,
		},
		{
			MethodName: "ResetUserPassWord",
			Handler:    _EasService_ResetUserPassWord_Handler,
		},
		{
			MethodName: "UpdateUserPassWord",
			Handler:    _EasService_UpdateUserPassWord_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _EasService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eas_api/v1/eas.proto",
}
