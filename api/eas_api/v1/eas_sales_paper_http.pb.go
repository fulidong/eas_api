// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v3.19.3
// source: eas_api/v1/eas_sales_paper.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEasSalesPaperServiceCreateSalesPaper = "/eas_api.v1.EasSalesPaperService/CreateSalesPaper"
const OperationEasSalesPaperServiceCreateSalesPaperDimension = "/eas_api.v1.EasSalesPaperService/CreateSalesPaperDimension"
const OperationEasSalesPaperServiceDeleteSalesPaper = "/eas_api.v1.EasSalesPaperService/DeleteSalesPaper"
const OperationEasSalesPaperServiceDeleteSalesPaperDimension = "/eas_api.v1.EasSalesPaperService/DeleteSalesPaperDimension"
const OperationEasSalesPaperServiceDeleteSalesPaperDimensionQuestion = "/eas_api.v1.EasSalesPaperService/DeleteSalesPaperDimensionQuestion"
const OperationEasSalesPaperServiceGetSalesPaperCommentList = "/eas_api.v1.EasSalesPaperService/GetSalesPaperCommentList"
const OperationEasSalesPaperServiceGetSalesPaperDetail = "/eas_api.v1.EasSalesPaperService/GetSalesPaperDetail"
const OperationEasSalesPaperServiceGetSalesPaperDimensionCommentList = "/eas_api.v1.EasSalesPaperService/GetSalesPaperDimensionCommentList"
const OperationEasSalesPaperServiceGetSalesPaperDimensionDetail = "/eas_api.v1.EasSalesPaperService/GetSalesPaperDimensionDetail"
const OperationEasSalesPaperServiceGetSalesPaperDimensionList = "/eas_api.v1.EasSalesPaperService/GetSalesPaperDimensionList"
const OperationEasSalesPaperServiceGetSalesPaperDimensionQuestionDetail = "/eas_api.v1.EasSalesPaperService/GetSalesPaperDimensionQuestionDetail"
const OperationEasSalesPaperServiceGetSalesPaperDimensionQuestionList = "/eas_api.v1.EasSalesPaperService/GetSalesPaperDimensionQuestionList"
const OperationEasSalesPaperServiceGetSalesPaperDimensionQuestionPreView = "/eas_api.v1.EasSalesPaperService/GetSalesPaperDimensionQuestionPreView"
const OperationEasSalesPaperServiceGetSalesPaperPageList = "/eas_api.v1.EasSalesPaperService/GetSalesPaperPageList"
const OperationEasSalesPaperServiceGetUsableSalesPaperPageList = "/eas_api.v1.EasSalesPaperService/GetUsableSalesPaperPageList"
const OperationEasSalesPaperServiceSaveSalesPaperComment = "/eas_api.v1.EasSalesPaperService/SaveSalesPaperComment"
const OperationEasSalesPaperServiceSaveSalesPaperDimensionComment = "/eas_api.v1.EasSalesPaperService/SaveSalesPaperDimensionComment"
const OperationEasSalesPaperServiceSaveSalesPaperDimensionQuestion = "/eas_api.v1.EasSalesPaperService/SaveSalesPaperDimensionQuestion"
const OperationEasSalesPaperServiceSetSalesPaperStatus = "/eas_api.v1.EasSalesPaperService/SetSalesPaperStatus"
const OperationEasSalesPaperServiceUpdateSalesPaper = "/eas_api.v1.EasSalesPaperService/UpdateSalesPaper"
const OperationEasSalesPaperServiceUpdateSalesPaperDimension = "/eas_api.v1.EasSalesPaperService/UpdateSalesPaperDimension"

type EasSalesPaperServiceHTTPServer interface {
	// CreateSalesPaper===============================试卷模块=========================================
	//创建试卷
	CreateSalesPaper(context.Context, *CreateSalesPaperRequest) (*CreateSalesPaperResponse, error)
	// CreateSalesPaperDimension===============================试卷维度模块=========================================
	//创建试卷维度
	CreateSalesPaperDimension(context.Context, *CreateSalesPaperDimensionRequest) (*CreateSalesPaperDimensionResponse, error)
	// DeleteSalesPaper删除试卷
	DeleteSalesPaper(context.Context, *DeleteSalesPaperRequest) (*DeleteSalesPaperResponse, error)
	// DeleteSalesPaperDimension删除试卷维度
	DeleteSalesPaperDimension(context.Context, *DeleteSalesPaperDimensionRequest) (*DeleteSalesPaperDimensionResponse, error)
	// DeleteSalesPaperDimensionQuestion删除试卷维度题目
	DeleteSalesPaperDimensionQuestion(context.Context, *DeleteSalesPaperDimensionQuestionRequest) (*DeleteSalesPaperDimensionQuestionResponse, error)
	// GetSalesPaperCommentList试卷评语列表
	GetSalesPaperCommentList(context.Context, *GetSalesPaperCommentListRequest) (*GetSalesPaperCommentListResponse, error)
	// GetSalesPaperDetail试卷详情
	GetSalesPaperDetail(context.Context, *GetSalesPaperDetailRequest) (*GetSalesPaperDetailResponse, error)
	// GetSalesPaperDimensionCommentList试卷维度评语列表
	GetSalesPaperDimensionCommentList(context.Context, *GetSalesPaperDimensionCommentListRequest) (*GetSalesPaperDimensionCommentListResponse, error)
	// GetSalesPaperDimensionDetail试卷维度详情
	GetSalesPaperDimensionDetail(context.Context, *GetSalesPaperDimensionDetailRequest) (*GetSalesPaperDimensionDetailResponse, error)
	// GetSalesPaperDimensionList试卷维度列表
	GetSalesPaperDimensionList(context.Context, *GetSalesPaperDimensionListRequest) (*GetSalesPaperDimensionListResponse, error)
	// GetSalesPaperDimensionQuestionDetail试卷维度题目详情
	GetSalesPaperDimensionQuestionDetail(context.Context, *GetSalesPaperDimensionQuestionDetailRequest) (*GetSalesPaperDimensionQuestionDetailResponse, error)
	// GetSalesPaperDimensionQuestionList试卷维度题目列表
	GetSalesPaperDimensionQuestionList(context.Context, *GetSalesPaperDimensionQuestionListRequest) (*GetSalesPaperDimensionQuestionListResponse, error)
	// GetSalesPaperDimensionQuestionPreView试卷维度题目预览
	GetSalesPaperDimensionQuestionPreView(context.Context, *GetSalesPaperDimensionQuestionPreViewRequest) (*GetSalesPaperDimensionQuestionPreViewResponse, error)
	// GetSalesPaperPageList试卷列表
	GetSalesPaperPageList(context.Context, *GetSalesPaperPageListRequest) (*GetSalesPaperPageListResponse, error)
	// GetUsableSalesPaperPageList可用试卷列表
	GetUsableSalesPaperPageList(context.Context, *GetUsableSalesPaperPageListRequest) (*GetUsableSalesPaperPageListResponse, error)
	// SaveSalesPaperComment===============================试卷评语模块=========================================
	//保存试卷评语
	SaveSalesPaperComment(context.Context, *SaveSalesPaperCommentRequest) (*SaveSalesPaperCommentResponse, error)
	// SaveSalesPaperDimensionComment===============================试卷维度评语模块=========================================
	//保存试卷维度评语
	SaveSalesPaperDimensionComment(context.Context, *SaveSalesPaperDimensionCommentRequest) (*SaveSalesPaperDimensionCommentResponse, error)
	// SaveSalesPaperDimensionQuestion===============================试卷维度题目模块=========================================
	//保存试卷维度题目
	SaveSalesPaperDimensionQuestion(context.Context, *SaveSalesPaperDimensionQuestionRequest) (*SaveSalesPaperDimensionQuestionResponse, error)
	// SetSalesPaperStatus禁用/启用试卷
	SetSalesPaperStatus(context.Context, *SetSalesPaperStatusRequest) (*SetSalesPaperStatusResponse, error)
	// UpdateSalesPaper修改试卷信息
	UpdateSalesPaper(context.Context, *UpdateSalesPaperRequest) (*UpdateSalesPaperResponse, error)
	// UpdateSalesPaperDimension修改试卷维度信息
	UpdateSalesPaperDimension(context.Context, *UpdateSalesPaperDimensionRequest) (*UpdateSalesPaperDimensionResponse, error)
}

func RegisterEasSalesPaperServiceHTTPServer(s *http.Server, srv EasSalesPaperServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/sales_pager/create", _EasSalesPaperService_CreateSalesPaper0_HTTP_Handler(srv))
	r.GET("/v1/sales_pager/page_list", _EasSalesPaperService_GetSalesPaperPageList0_HTTP_Handler(srv))
	r.GET("/v1/sales_pager/usable_page_list", _EasSalesPaperService_GetUsableSalesPaperPageList0_HTTP_Handler(srv))
	r.GET("/v1/sales_pager/detail", _EasSalesPaperService_GetSalesPaperDetail0_HTTP_Handler(srv))
	r.PUT("/v1/sales_pager/update", _EasSalesPaperService_UpdateSalesPaper0_HTTP_Handler(srv))
	r.PUT("/v1/sales_pager/set_status", _EasSalesPaperService_SetSalesPaperStatus0_HTTP_Handler(srv))
	r.PUT("/v1/sales_pager/delete", _EasSalesPaperService_DeleteSalesPaper0_HTTP_Handler(srv))
	r.POST("/v1/sales_pager_comment/save", _EasSalesPaperService_SaveSalesPaperComment0_HTTP_Handler(srv))
	r.GET("/v1/sales_pager_comment/list", _EasSalesPaperService_GetSalesPaperCommentList0_HTTP_Handler(srv))
	r.POST("/v1/sales_paper_dimension/create", _EasSalesPaperService_CreateSalesPaperDimension0_HTTP_Handler(srv))
	r.GET("/v1/sales_paper_dimension/page_list", _EasSalesPaperService_GetSalesPaperDimensionList0_HTTP_Handler(srv))
	r.GET("/v1/sales_paper_dimension/detail", _EasSalesPaperService_GetSalesPaperDimensionDetail0_HTTP_Handler(srv))
	r.PUT("/v1/sales_paper_dimension/update", _EasSalesPaperService_UpdateSalesPaperDimension0_HTTP_Handler(srv))
	r.PUT("/v1/sales_paper_dimension/delete", _EasSalesPaperService_DeleteSalesPaperDimension0_HTTP_Handler(srv))
	r.POST("/v1/sales_pager_dimension_comment/save", _EasSalesPaperService_SaveSalesPaperDimensionComment0_HTTP_Handler(srv))
	r.GET("/v1/sales_pager_dimension_comment/list", _EasSalesPaperService_GetSalesPaperDimensionCommentList0_HTTP_Handler(srv))
	r.POST("/v1/sales_pager_dimension_question/save", _EasSalesPaperService_SaveSalesPaperDimensionQuestion0_HTTP_Handler(srv))
	r.GET("/v1/sales_pager_dimension_question/list", _EasSalesPaperService_GetSalesPaperDimensionQuestionList0_HTTP_Handler(srv))
	r.GET("/v1/sales_pager_dimension_question/detail", _EasSalesPaperService_GetSalesPaperDimensionQuestionDetail0_HTTP_Handler(srv))
	r.PUT("/v1/sales_pager_dimension_question/delete", _EasSalesPaperService_DeleteSalesPaperDimensionQuestion0_HTTP_Handler(srv))
	r.GET("/v1/sales_pager_dimension_question/preview", _EasSalesPaperService_GetSalesPaperDimensionQuestionPreView0_HTTP_Handler(srv))
}

func _EasSalesPaperService_CreateSalesPaper0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSalesPaperRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceCreateSalesPaper)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSalesPaper(ctx, req.(*CreateSalesPaperRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSalesPaperResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_GetSalesPaperPageList0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSalesPaperPageListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceGetSalesPaperPageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSalesPaperPageList(ctx, req.(*GetSalesPaperPageListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSalesPaperPageListResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_GetUsableSalesPaperPageList0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUsableSalesPaperPageListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceGetUsableSalesPaperPageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUsableSalesPaperPageList(ctx, req.(*GetUsableSalesPaperPageListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUsableSalesPaperPageListResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_GetSalesPaperDetail0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSalesPaperDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceGetSalesPaperDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSalesPaperDetail(ctx, req.(*GetSalesPaperDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSalesPaperDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_UpdateSalesPaper0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSalesPaperRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceUpdateSalesPaper)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSalesPaper(ctx, req.(*UpdateSalesPaperRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSalesPaperResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_SetSalesPaperStatus0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSalesPaperStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceSetSalesPaperStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSalesPaperStatus(ctx, req.(*SetSalesPaperStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSalesPaperStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_DeleteSalesPaper0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSalesPaperRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceDeleteSalesPaper)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSalesPaper(ctx, req.(*DeleteSalesPaperRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSalesPaperResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_SaveSalesPaperComment0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveSalesPaperCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceSaveSalesPaperComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveSalesPaperComment(ctx, req.(*SaveSalesPaperCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveSalesPaperCommentResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_GetSalesPaperCommentList0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSalesPaperCommentListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceGetSalesPaperCommentList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSalesPaperCommentList(ctx, req.(*GetSalesPaperCommentListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSalesPaperCommentListResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_CreateSalesPaperDimension0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSalesPaperDimensionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceCreateSalesPaperDimension)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSalesPaperDimension(ctx, req.(*CreateSalesPaperDimensionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSalesPaperDimensionResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_GetSalesPaperDimensionList0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSalesPaperDimensionListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceGetSalesPaperDimensionList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSalesPaperDimensionList(ctx, req.(*GetSalesPaperDimensionListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSalesPaperDimensionListResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_GetSalesPaperDimensionDetail0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSalesPaperDimensionDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceGetSalesPaperDimensionDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSalesPaperDimensionDetail(ctx, req.(*GetSalesPaperDimensionDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSalesPaperDimensionDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_UpdateSalesPaperDimension0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSalesPaperDimensionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceUpdateSalesPaperDimension)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSalesPaperDimension(ctx, req.(*UpdateSalesPaperDimensionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSalesPaperDimensionResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_DeleteSalesPaperDimension0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSalesPaperDimensionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceDeleteSalesPaperDimension)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSalesPaperDimension(ctx, req.(*DeleteSalesPaperDimensionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSalesPaperDimensionResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_SaveSalesPaperDimensionComment0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveSalesPaperDimensionCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceSaveSalesPaperDimensionComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveSalesPaperDimensionComment(ctx, req.(*SaveSalesPaperDimensionCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveSalesPaperDimensionCommentResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_GetSalesPaperDimensionCommentList0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSalesPaperDimensionCommentListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceGetSalesPaperDimensionCommentList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSalesPaperDimensionCommentList(ctx, req.(*GetSalesPaperDimensionCommentListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSalesPaperDimensionCommentListResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_SaveSalesPaperDimensionQuestion0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveSalesPaperDimensionQuestionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceSaveSalesPaperDimensionQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveSalesPaperDimensionQuestion(ctx, req.(*SaveSalesPaperDimensionQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveSalesPaperDimensionQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_GetSalesPaperDimensionQuestionList0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSalesPaperDimensionQuestionListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceGetSalesPaperDimensionQuestionList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSalesPaperDimensionQuestionList(ctx, req.(*GetSalesPaperDimensionQuestionListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSalesPaperDimensionQuestionListResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_GetSalesPaperDimensionQuestionDetail0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSalesPaperDimensionQuestionDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceGetSalesPaperDimensionQuestionDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSalesPaperDimensionQuestionDetail(ctx, req.(*GetSalesPaperDimensionQuestionDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSalesPaperDimensionQuestionDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_DeleteSalesPaperDimensionQuestion0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSalesPaperDimensionQuestionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceDeleteSalesPaperDimensionQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSalesPaperDimensionQuestion(ctx, req.(*DeleteSalesPaperDimensionQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSalesPaperDimensionQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _EasSalesPaperService_GetSalesPaperDimensionQuestionPreView0_HTTP_Handler(srv EasSalesPaperServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSalesPaperDimensionQuestionPreViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasSalesPaperServiceGetSalesPaperDimensionQuestionPreView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSalesPaperDimensionQuestionPreView(ctx, req.(*GetSalesPaperDimensionQuestionPreViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSalesPaperDimensionQuestionPreViewResponse)
		return ctx.Result(200, reply)
	}
}

type EasSalesPaperServiceHTTPClient interface {
	CreateSalesPaper(ctx context.Context, req *CreateSalesPaperRequest, opts ...http.CallOption) (rsp *CreateSalesPaperResponse, err error)
	CreateSalesPaperDimension(ctx context.Context, req *CreateSalesPaperDimensionRequest, opts ...http.CallOption) (rsp *CreateSalesPaperDimensionResponse, err error)
	DeleteSalesPaper(ctx context.Context, req *DeleteSalesPaperRequest, opts ...http.CallOption) (rsp *DeleteSalesPaperResponse, err error)
	DeleteSalesPaperDimension(ctx context.Context, req *DeleteSalesPaperDimensionRequest, opts ...http.CallOption) (rsp *DeleteSalesPaperDimensionResponse, err error)
	DeleteSalesPaperDimensionQuestion(ctx context.Context, req *DeleteSalesPaperDimensionQuestionRequest, opts ...http.CallOption) (rsp *DeleteSalesPaperDimensionQuestionResponse, err error)
	GetSalesPaperCommentList(ctx context.Context, req *GetSalesPaperCommentListRequest, opts ...http.CallOption) (rsp *GetSalesPaperCommentListResponse, err error)
	GetSalesPaperDetail(ctx context.Context, req *GetSalesPaperDetailRequest, opts ...http.CallOption) (rsp *GetSalesPaperDetailResponse, err error)
	GetSalesPaperDimensionCommentList(ctx context.Context, req *GetSalesPaperDimensionCommentListRequest, opts ...http.CallOption) (rsp *GetSalesPaperDimensionCommentListResponse, err error)
	GetSalesPaperDimensionDetail(ctx context.Context, req *GetSalesPaperDimensionDetailRequest, opts ...http.CallOption) (rsp *GetSalesPaperDimensionDetailResponse, err error)
	GetSalesPaperDimensionList(ctx context.Context, req *GetSalesPaperDimensionListRequest, opts ...http.CallOption) (rsp *GetSalesPaperDimensionListResponse, err error)
	GetSalesPaperDimensionQuestionDetail(ctx context.Context, req *GetSalesPaperDimensionQuestionDetailRequest, opts ...http.CallOption) (rsp *GetSalesPaperDimensionQuestionDetailResponse, err error)
	GetSalesPaperDimensionQuestionList(ctx context.Context, req *GetSalesPaperDimensionQuestionListRequest, opts ...http.CallOption) (rsp *GetSalesPaperDimensionQuestionListResponse, err error)
	GetSalesPaperDimensionQuestionPreView(ctx context.Context, req *GetSalesPaperDimensionQuestionPreViewRequest, opts ...http.CallOption) (rsp *GetSalesPaperDimensionQuestionPreViewResponse, err error)
	GetSalesPaperPageList(ctx context.Context, req *GetSalesPaperPageListRequest, opts ...http.CallOption) (rsp *GetSalesPaperPageListResponse, err error)
	GetUsableSalesPaperPageList(ctx context.Context, req *GetUsableSalesPaperPageListRequest, opts ...http.CallOption) (rsp *GetUsableSalesPaperPageListResponse, err error)
	SaveSalesPaperComment(ctx context.Context, req *SaveSalesPaperCommentRequest, opts ...http.CallOption) (rsp *SaveSalesPaperCommentResponse, err error)
	SaveSalesPaperDimensionComment(ctx context.Context, req *SaveSalesPaperDimensionCommentRequest, opts ...http.CallOption) (rsp *SaveSalesPaperDimensionCommentResponse, err error)
	SaveSalesPaperDimensionQuestion(ctx context.Context, req *SaveSalesPaperDimensionQuestionRequest, opts ...http.CallOption) (rsp *SaveSalesPaperDimensionQuestionResponse, err error)
	SetSalesPaperStatus(ctx context.Context, req *SetSalesPaperStatusRequest, opts ...http.CallOption) (rsp *SetSalesPaperStatusResponse, err error)
	UpdateSalesPaper(ctx context.Context, req *UpdateSalesPaperRequest, opts ...http.CallOption) (rsp *UpdateSalesPaperResponse, err error)
	UpdateSalesPaperDimension(ctx context.Context, req *UpdateSalesPaperDimensionRequest, opts ...http.CallOption) (rsp *UpdateSalesPaperDimensionResponse, err error)
}

type EasSalesPaperServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewEasSalesPaperServiceHTTPClient(client *http.Client) EasSalesPaperServiceHTTPClient {
	return &EasSalesPaperServiceHTTPClientImpl{client}
}

func (c *EasSalesPaperServiceHTTPClientImpl) CreateSalesPaper(ctx context.Context, in *CreateSalesPaperRequest, opts ...http.CallOption) (*CreateSalesPaperResponse, error) {
	var out CreateSalesPaperResponse
	pattern := "/v1/sales_pager/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceCreateSalesPaper))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) CreateSalesPaperDimension(ctx context.Context, in *CreateSalesPaperDimensionRequest, opts ...http.CallOption) (*CreateSalesPaperDimensionResponse, error) {
	var out CreateSalesPaperDimensionResponse
	pattern := "/v1/sales_paper_dimension/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceCreateSalesPaperDimension))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) DeleteSalesPaper(ctx context.Context, in *DeleteSalesPaperRequest, opts ...http.CallOption) (*DeleteSalesPaperResponse, error) {
	var out DeleteSalesPaperResponse
	pattern := "/v1/sales_pager/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceDeleteSalesPaper))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) DeleteSalesPaperDimension(ctx context.Context, in *DeleteSalesPaperDimensionRequest, opts ...http.CallOption) (*DeleteSalesPaperDimensionResponse, error) {
	var out DeleteSalesPaperDimensionResponse
	pattern := "/v1/sales_paper_dimension/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceDeleteSalesPaperDimension))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) DeleteSalesPaperDimensionQuestion(ctx context.Context, in *DeleteSalesPaperDimensionQuestionRequest, opts ...http.CallOption) (*DeleteSalesPaperDimensionQuestionResponse, error) {
	var out DeleteSalesPaperDimensionQuestionResponse
	pattern := "/v1/sales_pager_dimension_question/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceDeleteSalesPaperDimensionQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) GetSalesPaperCommentList(ctx context.Context, in *GetSalesPaperCommentListRequest, opts ...http.CallOption) (*GetSalesPaperCommentListResponse, error) {
	var out GetSalesPaperCommentListResponse
	pattern := "/v1/sales_pager_comment/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceGetSalesPaperCommentList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) GetSalesPaperDetail(ctx context.Context, in *GetSalesPaperDetailRequest, opts ...http.CallOption) (*GetSalesPaperDetailResponse, error) {
	var out GetSalesPaperDetailResponse
	pattern := "/v1/sales_pager/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceGetSalesPaperDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) GetSalesPaperDimensionCommentList(ctx context.Context, in *GetSalesPaperDimensionCommentListRequest, opts ...http.CallOption) (*GetSalesPaperDimensionCommentListResponse, error) {
	var out GetSalesPaperDimensionCommentListResponse
	pattern := "/v1/sales_pager_dimension_comment/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceGetSalesPaperDimensionCommentList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) GetSalesPaperDimensionDetail(ctx context.Context, in *GetSalesPaperDimensionDetailRequest, opts ...http.CallOption) (*GetSalesPaperDimensionDetailResponse, error) {
	var out GetSalesPaperDimensionDetailResponse
	pattern := "/v1/sales_paper_dimension/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceGetSalesPaperDimensionDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) GetSalesPaperDimensionList(ctx context.Context, in *GetSalesPaperDimensionListRequest, opts ...http.CallOption) (*GetSalesPaperDimensionListResponse, error) {
	var out GetSalesPaperDimensionListResponse
	pattern := "/v1/sales_paper_dimension/page_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceGetSalesPaperDimensionList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) GetSalesPaperDimensionQuestionDetail(ctx context.Context, in *GetSalesPaperDimensionQuestionDetailRequest, opts ...http.CallOption) (*GetSalesPaperDimensionQuestionDetailResponse, error) {
	var out GetSalesPaperDimensionQuestionDetailResponse
	pattern := "/v1/sales_pager_dimension_question/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceGetSalesPaperDimensionQuestionDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) GetSalesPaperDimensionQuestionList(ctx context.Context, in *GetSalesPaperDimensionQuestionListRequest, opts ...http.CallOption) (*GetSalesPaperDimensionQuestionListResponse, error) {
	var out GetSalesPaperDimensionQuestionListResponse
	pattern := "/v1/sales_pager_dimension_question/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceGetSalesPaperDimensionQuestionList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) GetSalesPaperDimensionQuestionPreView(ctx context.Context, in *GetSalesPaperDimensionQuestionPreViewRequest, opts ...http.CallOption) (*GetSalesPaperDimensionQuestionPreViewResponse, error) {
	var out GetSalesPaperDimensionQuestionPreViewResponse
	pattern := "/v1/sales_pager_dimension_question/preview"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceGetSalesPaperDimensionQuestionPreView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) GetSalesPaperPageList(ctx context.Context, in *GetSalesPaperPageListRequest, opts ...http.CallOption) (*GetSalesPaperPageListResponse, error) {
	var out GetSalesPaperPageListResponse
	pattern := "/v1/sales_pager/page_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceGetSalesPaperPageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) GetUsableSalesPaperPageList(ctx context.Context, in *GetUsableSalesPaperPageListRequest, opts ...http.CallOption) (*GetUsableSalesPaperPageListResponse, error) {
	var out GetUsableSalesPaperPageListResponse
	pattern := "/v1/sales_pager/usable_page_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceGetUsableSalesPaperPageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) SaveSalesPaperComment(ctx context.Context, in *SaveSalesPaperCommentRequest, opts ...http.CallOption) (*SaveSalesPaperCommentResponse, error) {
	var out SaveSalesPaperCommentResponse
	pattern := "/v1/sales_pager_comment/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceSaveSalesPaperComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) SaveSalesPaperDimensionComment(ctx context.Context, in *SaveSalesPaperDimensionCommentRequest, opts ...http.CallOption) (*SaveSalesPaperDimensionCommentResponse, error) {
	var out SaveSalesPaperDimensionCommentResponse
	pattern := "/v1/sales_pager_dimension_comment/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceSaveSalesPaperDimensionComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) SaveSalesPaperDimensionQuestion(ctx context.Context, in *SaveSalesPaperDimensionQuestionRequest, opts ...http.CallOption) (*SaveSalesPaperDimensionQuestionResponse, error) {
	var out SaveSalesPaperDimensionQuestionResponse
	pattern := "/v1/sales_pager_dimension_question/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceSaveSalesPaperDimensionQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) SetSalesPaperStatus(ctx context.Context, in *SetSalesPaperStatusRequest, opts ...http.CallOption) (*SetSalesPaperStatusResponse, error) {
	var out SetSalesPaperStatusResponse
	pattern := "/v1/sales_pager/set_status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceSetSalesPaperStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) UpdateSalesPaper(ctx context.Context, in *UpdateSalesPaperRequest, opts ...http.CallOption) (*UpdateSalesPaperResponse, error) {
	var out UpdateSalesPaperResponse
	pattern := "/v1/sales_pager/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceUpdateSalesPaper))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasSalesPaperServiceHTTPClientImpl) UpdateSalesPaperDimension(ctx context.Context, in *UpdateSalesPaperDimensionRequest, opts ...http.CallOption) (*UpdateSalesPaperDimensionResponse, error) {
	var out UpdateSalesPaperDimensionResponse
	pattern := "/v1/sales_paper_dimension/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasSalesPaperServiceUpdateSalesPaperDimension))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
