// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v3.19.3
// source: eas_api/v1/eas.proto

package v1

import (
	context "context"
	common "eas_api/api/common"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEasServiceCreateUser = "/eas_api.v1.EasService/CreateUser"
const OperationEasServiceDeleteUser = "/eas_api.v1.EasService/DeleteUser"
const OperationEasServiceGetPageList = "/eas_api.v1.EasService/GetPageList"
const OperationEasServiceGetUserDetail = "/eas_api.v1.EasService/GetUserDetail"
const OperationEasServiceGetUserSelfDetail = "/eas_api.v1.EasService/GetUserSelfDetail"
const OperationEasServiceHealthy = "/eas_api.v1.EasService/Healthy"
const OperationEasServiceLogin = "/eas_api.v1.EasService/Login"
const OperationEasServiceResetUserPassWord = "/eas_api.v1.EasService/ResetUserPassWord"
const OperationEasServiceSetUserStatus = "/eas_api.v1.EasService/SetUserStatus"
const OperationEasServiceUpdateUser = "/eas_api.v1.EasService/UpdateUser"
const OperationEasServiceUpdateUserPassWord = "/eas_api.v1.EasService/UpdateUserPassWord"
const OperationEasServiceUpdateUserSelf = "/eas_api.v1.EasService/UpdateUserSelf"

type EasServiceHTTPServer interface {
	// CreateUser===============================用户模块=========================================
	//创建用户
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// DeleteUser删除
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// GetPageList用户列表
	GetPageList(context.Context, *GetPageListRequest) (*GetPageListResponse, error)
	// GetUserDetail用户详情
	GetUserDetail(context.Context, *GetUserDetailRequest) (*GetUserDetailResponse, error)
	// GetUserSelfDetail查询用户个人信息
	GetUserSelfDetail(context.Context, *GetUserSelfDetailRequest) (*GetUserSelfDetailResponse, error)
	Healthy(context.Context, *common.EmptyRequest) (*common.HealthyReply, error)
	// Login 登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// ResetUserPassWord重置用户密码
	ResetUserPassWord(context.Context, *ResetUserPassWordRequest) (*ResetUserPassWordResponse, error)
	// SetUserStatus禁用/启用用户
	SetUserStatus(context.Context, *SetUserStatusRequest) (*SetUserStatusResponse, error)
	// UpdateUser修改用户信息
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// UpdateUserPassWord修改密码
	UpdateUserPassWord(context.Context, *UpdateUserPassWordRequest) (*UpdateUserPassWordResponse, error)
	// UpdateUserSelf修改用户个人信息
	UpdateUserSelf(context.Context, *UpdateUserSelfRequest) (*UpdateUserSelfResponse, error)
}

func RegisterEasServiceHTTPServer(s *http.Server, srv EasServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/healthz", _EasService_Healthy0_HTTP_Handler(srv))
	r.POST("/v1/eas/login", _EasService_Login0_HTTP_Handler(srv))
	r.POST("/v1/user/create", _EasService_CreateUser0_HTTP_Handler(srv))
	r.GET("/v1/user/page_list", _EasService_GetPageList0_HTTP_Handler(srv))
	r.GET("/v1/user/detail", _EasService_GetUserDetail0_HTTP_Handler(srv))
	r.GET("/v1/user/detail_self", _EasService_GetUserSelfDetail0_HTTP_Handler(srv))
	r.POST("/v1/user/set_status", _EasService_SetUserStatus0_HTTP_Handler(srv))
	r.POST("/v1/user/update", _EasService_UpdateUser0_HTTP_Handler(srv))
	r.POST("/v1/user/update_self", _EasService_UpdateUserSelf0_HTTP_Handler(srv))
	r.POST("/v1/user/reset_password", _EasService_ResetUserPassWord0_HTTP_Handler(srv))
	r.POST("/v1/user/update_password", _EasService_UpdateUserPassWord0_HTTP_Handler(srv))
	r.POST("/v1/user/delete", _EasService_DeleteUser0_HTTP_Handler(srv))
}

func _EasService_Healthy0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in common.EmptyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceHealthy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Healthy(ctx, req.(*common.EmptyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.HealthyReply)
		return ctx.Result(200, reply)
	}
}

func _EasService_Login0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _EasService_CreateUser0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserResponse)
		return ctx.Result(200, reply)
	}
}

func _EasService_GetPageList0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPageListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceGetPageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageList(ctx, req.(*GetPageListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPageListResponse)
		return ctx.Result(200, reply)
	}
}

func _EasService_GetUserDetail0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceGetUserDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserDetail(ctx, req.(*GetUserDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _EasService_GetUserSelfDetail0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserSelfDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceGetUserSelfDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserSelfDetail(ctx, req.(*GetUserSelfDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserSelfDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _EasService_SetUserStatus0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceSetUserStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserStatus(ctx, req.(*SetUserStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetUserStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _EasService_UpdateUser0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserResponse)
		return ctx.Result(200, reply)
	}
}

func _EasService_UpdateUserSelf0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserSelfRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceUpdateUserSelf)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserSelf(ctx, req.(*UpdateUserSelfRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserSelfResponse)
		return ctx.Result(200, reply)
	}
}

func _EasService_ResetUserPassWord0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetUserPassWordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceResetUserPassWord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetUserPassWord(ctx, req.(*ResetUserPassWordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetUserPassWordResponse)
		return ctx.Result(200, reply)
	}
}

func _EasService_UpdateUserPassWord0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserPassWordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceUpdateUserPassWord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserPassWord(ctx, req.(*UpdateUserPassWordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserPassWordResponse)
		return ctx.Result(200, reply)
	}
}

func _EasService_DeleteUser0_HTTP_Handler(srv EasServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasServiceDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserResponse)
		return ctx.Result(200, reply)
	}
}

type EasServiceHTTPClient interface {
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *CreateUserResponse, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *DeleteUserResponse, err error)
	GetPageList(ctx context.Context, req *GetPageListRequest, opts ...http.CallOption) (rsp *GetPageListResponse, err error)
	GetUserDetail(ctx context.Context, req *GetUserDetailRequest, opts ...http.CallOption) (rsp *GetUserDetailResponse, err error)
	GetUserSelfDetail(ctx context.Context, req *GetUserSelfDetailRequest, opts ...http.CallOption) (rsp *GetUserSelfDetailResponse, err error)
	Healthy(ctx context.Context, req *common.EmptyRequest, opts ...http.CallOption) (rsp *common.HealthyReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	ResetUserPassWord(ctx context.Context, req *ResetUserPassWordRequest, opts ...http.CallOption) (rsp *ResetUserPassWordResponse, err error)
	SetUserStatus(ctx context.Context, req *SetUserStatusRequest, opts ...http.CallOption) (rsp *SetUserStatusResponse, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *UpdateUserResponse, err error)
	UpdateUserPassWord(ctx context.Context, req *UpdateUserPassWordRequest, opts ...http.CallOption) (rsp *UpdateUserPassWordResponse, err error)
	UpdateUserSelf(ctx context.Context, req *UpdateUserSelfRequest, opts ...http.CallOption) (rsp *UpdateUserSelfResponse, err error)
}

type EasServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewEasServiceHTTPClient(client *http.Client) EasServiceHTTPClient {
	return &EasServiceHTTPClientImpl{client}
}

func (c *EasServiceHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*CreateUserResponse, error) {
	var out CreateUserResponse
	pattern := "/v1/user/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasServiceCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*DeleteUserResponse, error) {
	var out DeleteUserResponse
	pattern := "/v1/user/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasServiceDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) GetPageList(ctx context.Context, in *GetPageListRequest, opts ...http.CallOption) (*GetPageListResponse, error) {
	var out GetPageListResponse
	pattern := "/v1/user/page_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasServiceGetPageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) GetUserDetail(ctx context.Context, in *GetUserDetailRequest, opts ...http.CallOption) (*GetUserDetailResponse, error) {
	var out GetUserDetailResponse
	pattern := "/v1/user/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasServiceGetUserDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) GetUserSelfDetail(ctx context.Context, in *GetUserSelfDetailRequest, opts ...http.CallOption) (*GetUserSelfDetailResponse, error) {
	var out GetUserSelfDetailResponse
	pattern := "/v1/user/detail_self"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasServiceGetUserSelfDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) Healthy(ctx context.Context, in *common.EmptyRequest, opts ...http.CallOption) (*common.HealthyReply, error) {
	var out common.HealthyReply
	pattern := "/healthz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasServiceHealthy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/v1/eas/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) ResetUserPassWord(ctx context.Context, in *ResetUserPassWordRequest, opts ...http.CallOption) (*ResetUserPassWordResponse, error) {
	var out ResetUserPassWordResponse
	pattern := "/v1/user/reset_password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasServiceResetUserPassWord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) SetUserStatus(ctx context.Context, in *SetUserStatusRequest, opts ...http.CallOption) (*SetUserStatusResponse, error) {
	var out SetUserStatusResponse
	pattern := "/v1/user/set_status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasServiceSetUserStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*UpdateUserResponse, error) {
	var out UpdateUserResponse
	pattern := "/v1/user/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasServiceUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) UpdateUserPassWord(ctx context.Context, in *UpdateUserPassWordRequest, opts ...http.CallOption) (*UpdateUserPassWordResponse, error) {
	var out UpdateUserPassWordResponse
	pattern := "/v1/user/update_password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasServiceUpdateUserPassWord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasServiceHTTPClientImpl) UpdateUserSelf(ctx context.Context, in *UpdateUserSelfRequest, opts ...http.CallOption) (*UpdateUserSelfResponse, error) {
	var out UpdateUserSelfResponse
	pattern := "/v1/user/update_self"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasServiceUpdateUserSelf))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
