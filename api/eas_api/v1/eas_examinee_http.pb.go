// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v3.19.3
// source: eas_api/v1/eas_examinee.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEasExamineeServiceDeleteExaminee = "/eas_api.v1.EasExamineeService/DeleteExaminee"
const OperationEasExamineeServiceGetExamineeDetail = "/eas_api.v1.EasExamineeService/GetExamineeDetail"
const OperationEasExamineeServiceGetExamineePageList = "/eas_api.v1.EasExamineeService/GetExamineePageList"
const OperationEasExamineeServiceGetProvidePageList = "/eas_api.v1.EasExamineeService/GetProvidePageList"
const OperationEasExamineeServiceProvide = "/eas_api.v1.EasExamineeService/Provide"
const OperationEasExamineeServiceSaveExaminee = "/eas_api.v1.EasExamineeService/SaveExaminee"
const OperationEasExamineeServiceUpdateExaminee = "/eas_api.v1.EasExamineeService/UpdateExaminee"

type EasExamineeServiceHTTPServer interface {
	// DeleteExaminee删除考生信息
	DeleteExaminee(context.Context, *DeleteExamineeRequest) (*DeleteExamineeResponse, error)
	// GetExamineeDetail考生详情
	GetExamineeDetail(context.Context, *GetExamineeDetailRequest) (*GetExamineeDetailResponse, error)
	// GetExamineePageList查询考生列表
	GetExamineePageList(context.Context, *GetExamineePageListRequest) (*GetExamineePageListResponse, error)
	// GetProvidePageList发放试卷列表
	GetProvidePageList(context.Context, *GetProvidePageListRequest) (*GetProvidePageListResponse, error)
	// Provide===============================发放试卷模块=========================================
	//发放试卷
	Provide(context.Context, *ProvideRequest) (*ProvideResponse, error)
	// SaveExaminee===============================考生模块=========================================
	//创建考生
	SaveExaminee(context.Context, *SaveExamineeRequest) (*SaveExamineeResponse, error)
	// UpdateExaminee修改考生信息
	UpdateExaminee(context.Context, *UpdateExamineeRequest) (*UpdateExamineeResponse, error)
}

func RegisterEasExamineeServiceHTTPServer(s *http.Server, srv EasExamineeServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/examinee/save", _EasExamineeService_SaveExaminee0_HTTP_Handler(srv))
	r.GET("/v1/examinee/page_list", _EasExamineeService_GetExamineePageList0_HTTP_Handler(srv))
	r.GET("/v1/examinee/detail", _EasExamineeService_GetExamineeDetail0_HTTP_Handler(srv))
	r.PUT("/v1/examinee/update", _EasExamineeService_UpdateExaminee0_HTTP_Handler(srv))
	r.PUT("/v1/examinee/delete", _EasExamineeService_DeleteExaminee0_HTTP_Handler(srv))
	r.POST("/v1/provide/create", _EasExamineeService_Provide0_HTTP_Handler(srv))
	r.GET("/v1/provide/page_list", _EasExamineeService_GetProvidePageList0_HTTP_Handler(srv))
}

func _EasExamineeService_SaveExaminee0_HTTP_Handler(srv EasExamineeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveExamineeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasExamineeServiceSaveExaminee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveExaminee(ctx, req.(*SaveExamineeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveExamineeResponse)
		return ctx.Result(200, reply)
	}
}

func _EasExamineeService_GetExamineePageList0_HTTP_Handler(srv EasExamineeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExamineePageListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasExamineeServiceGetExamineePageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExamineePageList(ctx, req.(*GetExamineePageListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetExamineePageListResponse)
		return ctx.Result(200, reply)
	}
}

func _EasExamineeService_GetExamineeDetail0_HTTP_Handler(srv EasExamineeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExamineeDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasExamineeServiceGetExamineeDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExamineeDetail(ctx, req.(*GetExamineeDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetExamineeDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _EasExamineeService_UpdateExaminee0_HTTP_Handler(srv EasExamineeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateExamineeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasExamineeServiceUpdateExaminee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateExaminee(ctx, req.(*UpdateExamineeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateExamineeResponse)
		return ctx.Result(200, reply)
	}
}

func _EasExamineeService_DeleteExaminee0_HTTP_Handler(srv EasExamineeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteExamineeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasExamineeServiceDeleteExaminee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteExaminee(ctx, req.(*DeleteExamineeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteExamineeResponse)
		return ctx.Result(200, reply)
	}
}

func _EasExamineeService_Provide0_HTTP_Handler(srv EasExamineeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProvideRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasExamineeServiceProvide)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Provide(ctx, req.(*ProvideRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProvideResponse)
		return ctx.Result(200, reply)
	}
}

func _EasExamineeService_GetProvidePageList0_HTTP_Handler(srv EasExamineeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProvidePageListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEasExamineeServiceGetProvidePageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProvidePageList(ctx, req.(*GetProvidePageListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProvidePageListResponse)
		return ctx.Result(200, reply)
	}
}

type EasExamineeServiceHTTPClient interface {
	DeleteExaminee(ctx context.Context, req *DeleteExamineeRequest, opts ...http.CallOption) (rsp *DeleteExamineeResponse, err error)
	GetExamineeDetail(ctx context.Context, req *GetExamineeDetailRequest, opts ...http.CallOption) (rsp *GetExamineeDetailResponse, err error)
	GetExamineePageList(ctx context.Context, req *GetExamineePageListRequest, opts ...http.CallOption) (rsp *GetExamineePageListResponse, err error)
	GetProvidePageList(ctx context.Context, req *GetProvidePageListRequest, opts ...http.CallOption) (rsp *GetProvidePageListResponse, err error)
	Provide(ctx context.Context, req *ProvideRequest, opts ...http.CallOption) (rsp *ProvideResponse, err error)
	SaveExaminee(ctx context.Context, req *SaveExamineeRequest, opts ...http.CallOption) (rsp *SaveExamineeResponse, err error)
	UpdateExaminee(ctx context.Context, req *UpdateExamineeRequest, opts ...http.CallOption) (rsp *UpdateExamineeResponse, err error)
}

type EasExamineeServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewEasExamineeServiceHTTPClient(client *http.Client) EasExamineeServiceHTTPClient {
	return &EasExamineeServiceHTTPClientImpl{client}
}

func (c *EasExamineeServiceHTTPClientImpl) DeleteExaminee(ctx context.Context, in *DeleteExamineeRequest, opts ...http.CallOption) (*DeleteExamineeResponse, error) {
	var out DeleteExamineeResponse
	pattern := "/v1/examinee/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasExamineeServiceDeleteExaminee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasExamineeServiceHTTPClientImpl) GetExamineeDetail(ctx context.Context, in *GetExamineeDetailRequest, opts ...http.CallOption) (*GetExamineeDetailResponse, error) {
	var out GetExamineeDetailResponse
	pattern := "/v1/examinee/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasExamineeServiceGetExamineeDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasExamineeServiceHTTPClientImpl) GetExamineePageList(ctx context.Context, in *GetExamineePageListRequest, opts ...http.CallOption) (*GetExamineePageListResponse, error) {
	var out GetExamineePageListResponse
	pattern := "/v1/examinee/page_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasExamineeServiceGetExamineePageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasExamineeServiceHTTPClientImpl) GetProvidePageList(ctx context.Context, in *GetProvidePageListRequest, opts ...http.CallOption) (*GetProvidePageListResponse, error) {
	var out GetProvidePageListResponse
	pattern := "/v1/provide/page_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEasExamineeServiceGetProvidePageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasExamineeServiceHTTPClientImpl) Provide(ctx context.Context, in *ProvideRequest, opts ...http.CallOption) (*ProvideResponse, error) {
	var out ProvideResponse
	pattern := "/v1/provide/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasExamineeServiceProvide))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasExamineeServiceHTTPClientImpl) SaveExaminee(ctx context.Context, in *SaveExamineeRequest, opts ...http.CallOption) (*SaveExamineeResponse, error) {
	var out SaveExamineeResponse
	pattern := "/v1/examinee/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasExamineeServiceSaveExaminee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EasExamineeServiceHTTPClientImpl) UpdateExaminee(ctx context.Context, in *UpdateExamineeRequest, opts ...http.CallOption) (*UpdateExamineeResponse, error) {
	var out UpdateExamineeResponse
	pattern := "/v1/examinee/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEasExamineeServiceUpdateExaminee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
